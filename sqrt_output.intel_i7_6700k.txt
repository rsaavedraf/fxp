[H[2J[3J
=========================================
Calculating constants to use as gains for CORDIC square root:
=========================================
i: 1, prod: 0.86602540378443864678686264779727821406, 1/prod: 1.15470053837925152901301012464685413761
prod ulong value: 6ED9EBA16132A9CF  1/prod ulong value: 49E69D1640CC7134
i: 5, prod: 0.82829418283152751121536580547477512937, 1/prod: 1.20730052284261535594078046385035918320
prod ulong value: 6A058B355D3E0647  1/prod ulong value: 4D446969835FFE0B
i:10, prod: 0.82815949876289316394567183166053325749, 1/prod: 1.20749686684002614052088619978064798488
prod ulong value: 6A0121658778F32B  1/prod ulong value: 4D47A0F0466C9C9E
i:15, prod: 0.82815936108876287861718309968317441871, 1/prod: 1.20749706757564391566145411971433532017
prod ulong value: 6A01203DE051A45B  1/prod ulong value: 4D47A1C7D035F244
i:20, prod: 0.82815936096034116167168351307914520021, 1/prod: 1.20749706776288909324933856792583242168
prod ulong value: 6A01203D99B7E462  1/prod ulong value: 4D47A1C803AE2783



=========================================
Testing square root calculation using Cordic
=========================================
Calculations using 5 loops:
	u>=2, c:4
	kernel calculation for sqrt(0.562500000000000)
	kernel result: 0.621312260627747
	scaled       : 0.750232732873136
	shifted      : 3.000930931492544
	Expected   sqrt( 9.000000) =  3.00000000000000000000000000000000000000
	Calculated sqrt( 9.000000) =  3.00093093149254369557572819093849147976 (delta: 9.309E-04)

Average delta for 5 loops: 9.309E-04f

Calculations using 10 loops:
	u>=2, c:4
	kernel calculation for sqrt(0.562500000000000)
	kernel result: 0.621119725600487
	scaled       : 0.750000247392278
	shifted      : 3.000000989569111
	Expected   sqrt( 9.000000) =  3.00000000000000000000000000000000000000
	Calculated sqrt( 9.000000) =  3.00000098956911091688075365890853163364 (delta: 9.896E-07)

Average delta for 10 loops: 9.896E-07f

Calculations using 15 loops:
	u>=2, c:4
	kernel calculation for sqrt(0.562500000000000)
	kernel result: 0.621119520836770
	scaled       : 0.750000000140691
	shifted      : 3.000000000562762
	Expected   sqrt( 9.000000) =  3.00000000000000000000000000000000000000
	Calculated sqrt( 9.000000) =  3.00000000056276225172957605735746255959 (delta: 5.628E-10)

Average delta for 15 loops: 5.628E-10f

Calculations using 20 loops:
	u>=2, c:4
	kernel calculation for sqrt(0.562500000000000)
	kernel result: 0.621119520720339
	scaled       : 0.750000000000101
	shifted      : 3.000000000000403
	Expected   sqrt( 9.000000) =  3.00000000000000000000000000000000000000
	Calculated sqrt( 9.000000) =  3.00000000000040327593694988728145744972 (delta: 4.033E-13)

Average delta for 20 loops: 4.033E-13f

