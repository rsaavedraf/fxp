[H[2J[3J========================
FXP Tester run
========================
Num type sizes in this system:
char        has a size of 1 bytes.
int         has a size of 4 bytes.
long        has a size of 8 bytes.
long long   has a size of 8 bytes.
float       has a size of 4 bytes.
double      has a size of 8 bytes.
long double has a size of 16 bytes.

Running tests for frac-bit sizes: 0, 11, 14, 16, 24, 31

========================
FXP configuration parameters:
frac bits   : 4 (requested was 0)
whole bits  : 28
pos infinity: 2147483647 (Lf: 134217728.000000)
whole max   : 134217727
frac mask   : 15
frac max    : 15 (->decimals: .9)
whole min   : -134217727
neg infinity: -2147483647 (Lf: -134217728.000000)
undefined   : -2147483648 (Lf: -134217728.000000)
max_ok_delta: 2.666667E-01
max_delta   : 4.666667E-01

Checking extreme int values, part I:
Infinity, got +INF,	expected 134217728.000000 (~same)
Largest, got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
HalfMax, got 67108863.  9 (bin frac=15),	expected 67108863.966667 (~same)
Largest frac, got 0.  9 (bin frac=15),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.066667 (~same)
0.5, got 0.  4 (bin frac=8),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.066667 (~same)
-Largest frac, got -0. -9 (bin frac=-15),	expected -1.000000 (~same)
Most negative, got -134217727. -8 (bin frac=-14),	expected -134217727.933333 (~same)
-Infinity, got -INF,	expected -134217728.000000 (~same)
Undefined, got UNDEF,	expected -134217728.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -134217727. -7 (bin frac=-13),	expected -134217727.866667 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
-Largest - 0, got -134217727. -8 (bin frac=-14),	expected -134217727.933333 (~same)
Largest - tiniest, got 134217727.  7 (bin frac=13),	expected 134217727.866667 (~same)
Largest + tiniest safe, got +INF,	expected 134217728.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 134217728.000000 (~same)
+inf + +inf, got +INF,	expected 134217728.000000 (~same)
-inf - +inf, got -INF,	expected -134217728.000000 (~same)
+inf + -inf, got UNDEF,	expected -134217728.000000 (~same)
-inf + -inf, got -INF,	expected -134217728.000000 (~same)
-inf - -inf, got UNDEF,	expected -134217728.000000 (~same)
+inf * -inf, got -INF,	expected -134217728.000000 (~same)
+inf - 0.5, got +INF,	expected 134217728.000000 (~same)
-inf + 0.5, got -INF,	expected -134217728.000000 (~same)
+num / zero, got +INF,	expected 134217728.000000 (~same)
zero / zero, got UNDEF,	expected -134217728.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -134217728.000000 (~same)
zero * +inf, got UNDEF,	expected -134217728.000000 (~same)
zero * -inf, got UNDEF,	expected -134217728.000000 (~same)
zero * undef, got UNDEF,	expected -134217728.000000 (~same)
-inf * undef, got UNDEF,	expected -134217728.000000 (~same)
+inf * undef, got UNDEF,	expected -134217728.000000 (~same)
undef * undef, got UNDEF,	expected -134217728.000000 (~same)
tiniest * inf, got +INF,	expected 134217728.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 134217728.000000 (~same)
Largest * 1, got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
Largest * -1, got -134217727. -8 (bin frac=-14),	expected -134217727.933333 (~same)
Largest + two safe, got +INF,	expected 134217728.000000 (~same)
Largest + two unsafe, got -134217726. -1 (bin frac=-2),	expected -134217726.133333 (~same)
Safe Too neg substraction, got -INF,	expected -134217728.000000 (~same)
Unsafe Too neg substraction, got 134217727.  6 (bin frac=10),	expected 134217727.666667 (~same)
Largest + 0.5, got +INF,	expected 134217728.000000 (~same)
-Largest - 0.5, got -INF,	expected -134217728.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 134217728.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -134217728.000000 (~same)
HalfMax + HalfMax, got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
FXP_MAX - HalfMax, got 67108863.  9 (bin frac=15),	expected 67108864.000000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 134217728.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -134217728.000000 (~same)
HalfMax * 2, got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
HalfMax * 2 (long), got 134217727.  8 (bin frac=14),	expected 134217727.933333 (~same)
HalfMax * 3, got +INF,	expected 134217728.000000 (~same)
-HalfMax * 3, got -INF,	expected -134217728.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 134217728.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 134217728.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9 (bin 15)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=1)
Showing fxp for 0.  2: 0.  1 (bin frac=3)
Showing fxp for 0.  3: 0.  3 (bin frac=5)
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)
:
Showing fxp for 0.  3: 0.  3 (bin frac=5)
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)
Showing fxp for 0.  6: 0.  6 (bin frac=10)
Showing fxp for 0.  7: 0.  6 (bin frac=11)
:
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)
Showing fxp for 0.  6: 0.  6 (bin frac=10)
Showing fxp for 0.  7: 0.  6 (bin frac=11)
Showing fxp for 0.  8: 0.  7 (bin frac=13)
Showing fxp for 0.  9: 0.  9 (bin frac=15)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.466 (bin frac=7),	expected 0.500000 (~same)
-0.(-)500, got -0.-466 (bin frac=-7),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.199 (bin frac=3),	expected 0.222000 (~same)
0.777777, got 0.732 (bin frac=11),	expected 0.777000 (~same)
0.991999, got 0.932 (bin frac=14),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=15),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.  9 (bin frac=15),	expected 1.000000 (~same)
0.5 + maxfrac, got 1.  4 (bin frac=7),	expected 1.500000 (~same)
maxfrac +tiniest, got 1.  0 (bin frac=0),	expected 1.000000 (~same)
-maxfrac -tiniest, got -1.  0 (bin frac=0),	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Simple ops when using 3 or more bits for the whole part:
 1 + 1, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
-1 - 1, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
Ok sum == 2, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
Ok sum == -2, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
 num, got 0.  4 (bin frac=7),	expected 0.466667 (~same)
 num +  2, got 2.  4 (bin frac=7),	expected 2.466667 (~same)
 num + -2, got -1. -5 (bin frac=-9),	expected -1.533333 (~same)
-num +  2, got 1.  5 (bin frac=9),	expected 1.533333 (~same)
-num + -2, got -2. -4 (bin frac=-7),	expected -2.466667 (~same)
 num -  2, got -1. -5 (bin frac=-9),	expected -1.533333 (~same)
 num - -2, got 2.  4 (bin frac=7),	expected 2.466667 (~same)
-num -  2, got -2. -4 (bin frac=-7),	expected -2.466667 (~same)
-num - -2, got 1.  5 (bin frac=9),	expected 1.533333 (~same)
 num *  2, got 0.  8 (bin frac=14),	expected 0.933333 (~same)
 num * -2, got -0. -8 (bin frac=-14),	expected -0.933333 (~same)
-num *  2, got -0. -8 (bin frac=-14),	expected -0.933333 (~same)
-num * -2, got 0.  8 (bin frac=14),	expected 0.933333 (~same)
 num *  2 (long), got 0.  8 (bin frac=14),	expected 0.933333 (~same)
 num * -2 (long), got -0. -8 (bin frac=-14),	expected -0.933333 (~same)
-num *  2 (long), got -0. -8 (bin frac=-14),	expected -0.933333 (~same)
-num * -2 (long), got 0.  8 (bin frac=14),	expected 0.933333 (~same)
 num /  2, got 0.  1 (bin frac=3),	expected 0.233333 (~same)
 num / -2, got -0. -1 (bin frac=-3),	expected -0.233333 (~same)
-num /  2, got -0. -1 (bin frac=-3),	expected -0.233333 (~same)
-num / -2, got 0.  1 (bin frac=3),	expected 0.233333 (~same)

Verifying different op implementations using random numbers:

n1 = 88907472.  1 (bin frac=3)  (fxp int is 1422519555)
n2 = 111936155.  8 (bin frac=14)  (fxp int is 1790978494)
n3 = 0.  0 (bin frac=1)  (fxp int is 1, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 134217728.000000 (~same)
b. sum vs. sum_l, got 88907472.  2 (bin frac=4),	expected 88907472.266667 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got 5556717.  0 (bin frac=0),	expected 5556717.000000 (~same)
g. mul vs. mul_d, got 5556717.  0 (bin frac=0),	expected 5556717.000000 (~same)
h. mul_l vs. mul_d, got 5556717.  0 (bin frac=0),	expected 5556717.000000 (~same)
i. div vs. div_l, got 0.  7 (bin frac=12),	expected 0.800000 (~same)
j. div vs. div_l, got +INF,	expected 134217728.000000 (~same)

n1 = -99169875. -2 (bin frac=-4)  (fxp int is -1586718004)
n2 = 44965480.  3 (bin frac=5)  (fxp int is 719447685)
n3 = -0.  0 (bin frac=-1)  (fxp int is -1, always in (-1,1) )
a. sum vs. sum_l, got -54204394. -9 (bin frac=-15),	expected -54204395.000000 (~same)
b. sum vs. sum_l, got -99169875. -3 (bin frac=-5),	expected -99169875.333333 (~same)
c. mul vs. mul_l, got -INF,	expected -134217728.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -134217728.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -134217728.000000 (~same)
f. mul vs. mul_l, got 6198117.  1 (bin frac=3),	expected 6198117.200000 (~same)
g. mul vs. mul_d, got 6198117.  1 (bin frac=3),	expected 6198117.200000 (~same)
h. mul_l vs. mul_d, got 6198117.  1 (bin frac=3),	expected 6198117.200000 (~same)
i. div vs. div_l, got -2. -1 (bin frac=-3),	expected -2.200000 (~same)
j. div vs. div_l, got +INF,	expected 134217728.000000 (~same)

n1 = -114051253. -7 (bin frac=-12)  (fxp int is -1824820060)
n2 = -119278121.  0 (bin frac=-1)  (fxp int is -1908449937)
n3 = -0. -3 (bin frac=-6)  (fxp int is -6, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -134217728.000000 (~same)
b. sum vs. sum_l, got -114051254. -1 (bin frac=-2),	expected -114051254.133333 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got 42769220.  1 (bin frac=2),	expected 42769220.133333 (~same)
g. mul vs. mul_d, got 42769220.  1 (bin frac=2),	expected 42769220.133333 (~same)
h. mul_l vs. mul_d, got 42769220.  1 (bin frac=2),	expected 42769220.133333 (~same)
i. div vs. div_l, got 0.  9 (bin frac=15),	expected 1.000000 (~same)
j. div vs. div_l, got +INF,	expected 134217728.000000 (~same)

n1 = 15156778.  7 (bin frac=13)  (fxp int is 242508461)
n2 = 122195203.  5 (bin frac=9)  (fxp int is 1955123257)
n3 = 0.  6 (bin frac=10)  (fxp int is 10, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 134217728.000000 (~same)
b. sum vs. sum_l, got 15156779.  4 (bin frac=7),	expected 15156779.466667 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got 9472986.  7 (bin frac=12),	expected 9472986.800000 (~same)
g. mul vs. mul_d, got 9472986.  7 (bin frac=12),	expected 9472986.800000 (~same)
h. mul_l vs. mul_d, got 9472986.  7 (bin frac=12),	expected 9472986.800000 (~same)
i. div vs. div_l, got 0.  0 (bin frac=1),	expected 0.066667 (~same)
j. div vs. div_l, got 24250846.  0 (bin frac=1),	expected 24250846.066667 (~same)

n1 = -81189119. -4 (bin frac=-7)  (fxp int is -1299025911)
n2 = -62948584.  0 (bin frac=0)  (fxp int is -1007177344)
n3 = 0.  0 (bin frac=0)  (fxp int is 0, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -134217728.000000 (~same)
b. sum vs. sum_l, got -81189119. -4 (bin frac=-7),	expected -81189119.466667 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
g. mul vs. mul_d, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
h. mul_l vs. mul_d, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
i. div vs. div_l, got 1.  2 (bin frac=4),	expected 1.266667 (~same)
j. div vs. div_l, got -INF,	expected -134217728.000000 (~same)

n1 = 133137932.  7 (bin frac=12)  (fxp int is 2130206924)
n2 = 35365292.  6 (bin frac=10)  (fxp int is 565844682)
n3 = -0. -2 (bin frac=-4)  (fxp int is -4, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 134217728.000000 (~same)
b. sum vs. sum_l, got 133137932.  4 (bin frac=8),	expected 133137932.533333 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got -33284483. -1 (bin frac=-3),	expected -33284483.200000 (~same)
g. mul vs. mul_d, got -33284483. -1 (bin frac=-3),	expected -33284483.200000 (~same)
h. mul_l vs. mul_d, got -33284483. -1 (bin frac=-3),	expected -33284483.200000 (~same)
i. div vs. div_l, got 3.  7 (bin frac=12),	expected 3.800000 (~same)
j. div vs. div_l, got -INF,	expected -134217728.000000 (~same)

n1 = 49506258.  0 (bin frac=0)  (fxp int is 792100128)
n2 = -24848184. -6 (bin frac=-11)  (fxp int is -397570955)
n3 = 0.  3 (bin frac=5)  (fxp int is 5, always in (-1,1) )
a. sum vs. sum_l, got 24658073.  3 (bin frac=5),	expected 24658073.333333 (~same)
b. sum vs. sum_l, got 49506258.  3 (bin frac=5),	expected 49506258.333333 (~same)
c. mul vs. mul_l, got -INF,	expected -134217728.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -134217728.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -134217728.000000 (~same)
f. mul vs. mul_l, got 15470705.  6 (bin frac=10),	expected 15470705.666667 (~same)
g. mul vs. mul_d, got 15470705.  6 (bin frac=10),	expected 15470705.666667 (~same)
h. mul_l vs. mul_d, got 15470705.  6 (bin frac=10),	expected 15470705.666667 (~same)
i. div vs. div_l, got -1. -9 (bin frac=-15),	expected -2.000000 (~same)
j. div vs. div_l, got +INF,	expected 134217728.000000 (~same)

n1 = -8061469. -4 (bin frac=-8)  (fxp int is -128983512)
n2 = 112359110.  7 (bin frac=12)  (fxp int is 1797745772)
n3 = 0.  0 (bin frac=1)  (fxp int is 1, always in (-1,1) )
a. sum vs. sum_l, got 104297641.  2 (bin frac=4),	expected 104297641.266667 (~same)
b. sum vs. sum_l, got -8061469. -4 (bin frac=-7),	expected -8061469.466667 (~same)
c. mul vs. mul_l, got -INF,	expected -134217728.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -134217728.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -134217728.000000 (~same)
f. mul vs. mul_l, got -503841. -7 (bin frac=-13),	expected -503841.866667 (~same)
g. mul vs. mul_d, got -503841. -7 (bin frac=-13),	expected -503841.933333 (~same)
h. mul_l vs. mul_d, got -503841. -7 (bin frac=-13),	expected -503841.933333 (~same)
i. div vs. div_l, got -0.  0 (bin frac=-1),	expected -0.066667 (~same)
j. div vs. div_l, got -128983512.  0 (bin frac=0),	expected -128983512.000000 (~same)

n1 = -15446294. -6 (bin frac=-11)  (fxp int is -247140715)
n2 = -121747417. -2 (bin frac=-4)  (fxp int is -1947958676)
n3 = -0. -1 (bin frac=-3)  (fxp int is -3, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -134217728.000000 (~same)
b. sum vs. sum_l, got -15446294. -8 (bin frac=-14),	expected -15446294.933333 (~same)
c. mul vs. mul_l, got +INF,	expected 134217728.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 134217728.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 134217728.000000 (~same)
f. mul vs. mul_l, got 2896180.  2 (bin frac=4),	expected 2896180.266667 (~same)
g. mul vs. mul_d, got 2896180.  2 (bin frac=4),	expected 2896180.266667 (~same)
h. mul_l vs. mul_d, got 2896180.  2 (bin frac=4),	expected 2896180.266667 (~same)
i. div vs. div_l, got 0.  1 (bin frac=2),	expected 0.133333 (~same)
j. div vs. div_l, got 82380238.  3 (bin frac=5),	expected 82380238.333333 (~same)

n1 = -47601823. -7 (bin frac=-12)  (fxp int is -761629180)
n2 = 21618473.  5 (bin frac=9)  (fxp int is 345895577)
n3 = 0.  3 (bin frac=6)  (fxp int is 6, always in (-1,1) )
a. sum vs. sum_l, got -25983350. -1 (bin frac=-3),	expected -25983350.200000 (~same)
b. sum vs. sum_l, got -47601823. -3 (bin frac=-6),	expected -47601823.400000 (~same)
c. mul vs. mul_l, got -INF,	expected -134217728.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -134217728.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -134217728.000000 (~same)
f. mul vs. mul_l, got -17850683. -8 (bin frac=-14),	expected -17850683.933333 (~same)
g. mul vs. mul_d, got -17850683. -8 (bin frac=-14),	expected -17850684.000000 (~same)
h. mul_l vs. mul_d, got -17850683. -8 (bin frac=-14),	expected -17850684.000000 (~same)
i. div vs. div_l, got -2. -1 (bin frac=-3),	expected -2.200000 (~same)
j. div vs. div_l, got -126938196. -6 (bin frac=-10),	expected -126938196.666667 (~same)

0 Warnings for 4 frac bits.
Largest delta was: 6.666667E-02
All tests passed using 4-bit fracs, and '9' as max decimal frac.


========================
FXP configuration parameters:
frac bits   : 11 (requested was 11)
whole bits  : 21
pos infinity: 2147483647 (Lf: 1048576.000000)
whole max   : 1048575
frac mask   : 2047
frac max    : 2047 (->decimals: .999)
whole min   : -1048575
neg infinity: -2147483647 (Lf: -1048576.000000)
undefined   : -2147483648 (Lf: -1048576.000000)
max_ok_delta: 3.545258E-02
max_delta   : 6.204201E-02

Checking extreme int values, part I:
Infinity, got +INF,	expected 1048576.000000 (~same)
Largest, got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
HalfMax, got 524287.999 (bin frac=2047),	expected 524287.999756 (~same)
Largest frac, got 0.999 (bin frac=2047),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.000489 (~same)
0.5, got 0.499 (bin frac=1024),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.000489 (~same)
-Largest frac, got -0.-999 (bin frac=-2047),	expected -1.000000 (~same)
Most negative, got -1048575.-998 (bin frac=-2046),	expected -1048575.999511 (~same)
-Infinity, got -INF,	expected -1048576.000000 (~same)
Undefined, got UNDEF,	expected -1048576.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -1048575.-998 (bin frac=-2045),	expected -1048575.999023 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
-Largest - 0, got -1048575.-998 (bin frac=-2046),	expected -1048575.999511 (~same)
Largest - tiniest, got 1048575.998 (bin frac=2045),	expected 1048575.999023 (~same)
Largest + tiniest safe, got +INF,	expected 1048576.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 1048576.000000 (~same)
+inf + +inf, got +INF,	expected 1048576.000000 (~same)
-inf - +inf, got -INF,	expected -1048576.000000 (~same)
+inf + -inf, got UNDEF,	expected -1048576.000000 (~same)
-inf + -inf, got -INF,	expected -1048576.000000 (~same)
-inf - -inf, got UNDEF,	expected -1048576.000000 (~same)
+inf * -inf, got -INF,	expected -1048576.000000 (~same)
+inf - 0.5, got +INF,	expected 1048576.000000 (~same)
-inf + 0.5, got -INF,	expected -1048576.000000 (~same)
+num / zero, got +INF,	expected 1048576.000000 (~same)
zero / zero, got UNDEF,	expected -1048576.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -1048576.000000 (~same)
zero * +inf, got UNDEF,	expected -1048576.000000 (~same)
zero * -inf, got UNDEF,	expected -1048576.000000 (~same)
zero * undef, got UNDEF,	expected -1048576.000000 (~same)
-inf * undef, got UNDEF,	expected -1048576.000000 (~same)
+inf * undef, got UNDEF,	expected -1048576.000000 (~same)
undef * undef, got UNDEF,	expected -1048576.000000 (~same)
tiniest * inf, got +INF,	expected 1048576.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 1048576.000000 (~same)
Largest * 1, got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
Largest * -1, got -1048575.-998 (bin frac=-2046),	expected -1048575.999511 (~same)
Largest + two safe, got +INF,	expected 1048576.000000 (~same)
Largest + two unsafe, got -1048574.  0 (bin frac=-2),	expected -1048574.000977 (~same)
Safe Too neg substraction, got -INF,	expected -1048576.000000 (~same)
Unsafe Too neg substraction, got 1048575.500 (bin frac=1026),	expected 1048575.501221 (~same)
Largest + 0.5, got +INF,	expected 1048576.000000 (~same)
-Largest - 0.5, got -INF,	expected -1048576.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 1048576.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -1048576.000000 (~same)
HalfMax + HalfMax, got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
FXP_MAX - HalfMax, got 524287.999 (bin frac=2047),	expected 524288.000000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 1048576.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -1048576.000000 (~same)
HalfMax * 2, got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
HalfMax * 2 (long), got 1048575.998 (bin frac=2046),	expected 1048575.999511 (~same)
HalfMax * 3, got +INF,	expected 1048576.000000 (~same)
-HalfMax * 3, got -INF,	expected -1048576.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 1048576.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 1048576.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 999 (bin 2047)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=2)
Showing fxp for 0.  2: 0.  1 (bin frac=4)
Showing fxp for 0.  3: 0.  2 (bin frac=6)
Showing fxp for 0.  4: 0.  3 (bin frac=8)
Showing fxp for 0.  5: 0.  4 (bin frac=10)
:
Showing fxp for 0.498: 0.497 (bin frac=1020)
Showing fxp for 0.499: 0.498 (bin frac=1022)
Showing fxp for 0.500: 0.499 (bin frac=1024)
Showing fxp for 0.501: 0.500 (bin frac=1026)
Showing fxp for 0.502: 0.501 (bin frac=1028)
:
Showing fxp for 0.994: 0.993 (bin frac=2036)
Showing fxp for 0.995: 0.994 (bin frac=2038)
Showing fxp for 0.996: 0.995 (bin frac=2040)
Showing fxp for 0.997: 0.996 (bin frac=2042)
Showing fxp for 0.998: 0.997 (bin frac=2044)
Showing fxp for 0.999: 0.999 (bin frac=2047)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.499 (bin frac=1024),	expected 0.500000 (~same)
-0.(-)500, got -0.-499 (bin frac=-1024),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.221 (bin frac=454),	expected 0.222000 (~same)
0.777777, got 0.776 (bin frac=1592),	expected 0.777000 (~same)
0.991999, got 0.990 (bin frac=2030),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=2047),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.999 (bin frac=2047),	expected 1.000000 (~same)
0.5 + maxfrac, got 1.499 (bin frac=1023),	expected 1.500000 (~same)
maxfrac +tiniest, got 1.  0 (bin frac=0),	expected 1.000000 (~same)
-maxfrac -tiniest, got -1.  0 (bin frac=0),	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Simple ops when using 3 or more bits for the whole part:
 1 + 1, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
-1 - 1, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
Ok sum == 2, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
Ok sum == -2, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
 num, got 0.499 (bin frac=1023),	expected 0.499756 (~same)
 num +  2, got 2.499 (bin frac=1023),	expected 2.499756 (~same)
 num + -2, got -1.-500 (bin frac=-1025),	expected -1.500244 (~same)
-num +  2, got 1.500 (bin frac=1025),	expected 1.500244 (~same)
-num + -2, got -2.-499 (bin frac=-1023),	expected -2.499756 (~same)
 num -  2, got -1.-500 (bin frac=-1025),	expected -1.500244 (~same)
 num - -2, got 2.499 (bin frac=1023),	expected 2.499756 (~same)
-num -  2, got -2.-499 (bin frac=-1023),	expected -2.499756 (~same)
-num - -2, got 1.500 (bin frac=1025),	expected 1.500244 (~same)
 num *  2, got 0.998 (bin frac=2046),	expected 0.999511 (~same)
 num * -2, got -0.-998 (bin frac=-2046),	expected -0.999511 (~same)
-num *  2, got -0.-998 (bin frac=-2046),	expected -0.999511 (~same)
-num * -2, got 0.998 (bin frac=2046),	expected 0.999511 (~same)
 num *  2 (long), got 0.998 (bin frac=2046),	expected 0.999511 (~same)
 num * -2 (long), got -0.-998 (bin frac=-2046),	expected -0.999511 (~same)
-num *  2 (long), got -0.-998 (bin frac=-2046),	expected -0.999511 (~same)
-num * -2 (long), got 0.998 (bin frac=2046),	expected 0.999511 (~same)
 num /  2, got 0.249 (bin frac=511),	expected 0.249878 (~same)
 num / -2, got -0.-249 (bin frac=-511),	expected -0.249878 (~same)
-num /  2, got -0.-249 (bin frac=-511),	expected -0.249878 (~same)
-num / -2, got 0.249 (bin frac=511),	expected 0.249878 (~same)

Verifying different op implementations using random numbers:

n1 = -610881.-47 (bin frac=-98)  (fxp int is -1251084386)
n2 = -82354.-579 (bin frac=-1187)  (fxp int is -168662179)
n3 = -0.-651 (bin frac=-1335)  (fxp int is -1335, always in (-1,1) )
a. sum vs. sum_l, got -693235.-627 (bin frac=-1285),	expected -693235.627748 (~same)
b. sum vs. sum_l, got -610881.-699 (bin frac=-1433),	expected -610881.700049 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got 398206.151 (bin frac=310),	expected 398206.151441 (~same)
g. mul vs. mul_d, got 398206.151 (bin frac=310),	expected 398206.151441 (~same)
h. mul_l vs. mul_d, got 398206.151 (bin frac=310),	expected 398206.151441 (~same)
i. div vs. div_l, got 7.417 (bin frac=855),	expected 7.417684 (~same)
j. div vs. div_l, got 937141.861 (bin frac=1765),	expected 937141.862237 (~same)

n1 = -520196.-834 (bin frac=-1709)  (fxp int is -1065363117)
n2 = -897577.-748 (bin frac=-1533)  (fxp int is -1838239229)
n3 = -0.-69 (bin frac=-142)  (fxp int is -142, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -1048576.000000 (~same)
b. sum vs. sum_l, got -520196.-903 (bin frac=-1851),	expected -520196.904250 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got 36068.334 (bin frac=686),	expected 36068.335125 (~same)
g. mul vs. mul_d, got 36068.334 (bin frac=686),	expected 36068.335125 (~same)
h. mul_l vs. mul_d, got 36068.334 (bin frac=686),	expected 36068.335125 (~same)
i. div vs. div_l, got 0.578 (bin frac=1186),	expected 0.579384 (~same)
j. div vs. div_l, got +INF,	expected 1048576.000000 (~same)

n1 = 562945.447 (bin frac=917)  (fxp int is 1152912277)
n2 = -583772.-618 (bin frac=-1267)  (fxp int is -1195566323)
n3 = -0.-122 (bin frac=-251)  (fxp int is -251, always in (-1,1) )
a. sum vs. sum_l, got -20827.-170 (bin frac=-350),	expected -20827.170982 (~same)
b. sum vs. sum_l, got 562945.325 (bin frac=666),	expected 562945.325354 (~same)
c. mul vs. mul_l, got -INF,	expected -1048576.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -1048576.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -1048576.000000 (~same)
f. mul vs. mul_l, got -68993.-801 (bin frac=-1643),	expected -68993.802638 (~same)
g. mul vs. mul_d, got -68993.-801 (bin frac=-1643),	expected -68993.803127 (~same)
h. mul_l vs. mul_d, got -68993.-801 (bin frac=-1643),	expected -68993.803127 (~same)
i. div vs. div_l, got -0.-963 (bin frac=-1974),	expected -0.964338 (~same)
j. div vs. div_l, got -INF,	expected -1048576.000000 (~same)

n1 = 956372.140 (bin frac=288)  (fxp int is 1958650144)
n2 = 758511.108 (bin frac=222)  (fxp int is 1553430750)
n3 = 0.148 (bin frac=305)  (fxp int is 305, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 1048576.000000 (~same)
b. sum vs. sum_l, got 956372.289 (bin frac=593),	expected 956372.289692 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got 142428.467 (bin frac=958),	expected 142428.468002 (~same)
g. mul vs. mul_d, got 142428.467 (bin frac=958),	expected 142428.468002 (~same)
h. mul_l vs. mul_d, got 142428.467 (bin frac=958),	expected 142428.468002 (~same)
i. div vs. div_l, got 1.260 (bin frac=534),	expected 1.260870 (~same)
j. div vs. div_l, got +INF,	expected 1048576.000000 (~same)

n1 = -884689.-313 (bin frac=-643)  (fxp int is -1811843715)
n2 = -211463.-931 (bin frac=-1909)  (fxp int is -433078133)
n3 = -0.-955 (bin frac=-1957)  (fxp int is -1957, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -1048576.000000 (~same)
b. sum vs. sum_l, got -884690.-269 (bin frac=-552),	expected -884690.269663 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got 845379.387 (bin frac=795),	expected 845379.388373 (~same)
g. mul vs. mul_d, got 845379.387 (bin frac=795),	expected 845379.388373 (~same)
h. mul_l vs. mul_d, got 845379.387 (bin frac=795),	expected 845379.388373 (~same)
i. div vs. div_l, got 4.183 (bin frac=376),	expected 4.183683 (~same)
j. div vs. div_l, got 925827.140 (bin frac=288),	expected 925827.140694 (~same)

n1 = 738487.771 (bin frac=1580)  (fxp int is 1512422956)
n2 = 384841.475 (bin frac=974)  (fxp int is 788155342)
n3 = -0.-599 (bin frac=-1229)  (fxp int is -1229, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 1048576.000000 (~same)
b. sum vs. sum_l, got 738487.171 (bin frac=351),	expected 738487.171470 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got -443164.-780 (bin frac=-1599),	expected -443164.781143 (~same)
g. mul vs. mul_d, got -443164.-780 (bin frac=-1599),	expected -443164.781632 (~same)
h. mul_l vs. mul_d, got -443164.-780 (bin frac=-1599),	expected -443164.781632 (~same)
i. div vs. div_l, got 1.917 (bin frac=1881),	expected 1.918906 (~same)
j. div vs. div_l, got -INF,	expected -1048576.000000 (~same)

n1 = -145932.-440 (bin frac=-902)  (fxp int is -298869638)
n2 = 293077.128 (bin frac=263)  (fxp int is 600221959)
n3 = -0.-232 (bin frac=-476)  (fxp int is -476, always in (-1,1) )
a. sum vs. sum_l, got 147144.687 (bin frac=1409),	expected 147144.688324 (~same)
b. sum vs. sum_l, got -145932.-672 (bin frac=-1378),	expected -145932.673180 (~same)
c. mul vs. mul_l, got -INF,	expected -1048576.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -1048576.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -1048576.000000 (~same)
f. mul vs. mul_l, got 33917.890 (bin frac=1825),	expected 33917.891549 (~same)
g. mul vs. mul_d, got 33917.890 (bin frac=1825),	expected 33917.891549 (~same)
h. mul_l vs. mul_d, got 33917.890 (bin frac=1825),	expected 33917.891549 (~same)
i. div vs. div_l, got -0.-497 (bin frac=-1019),	expected -0.497802 (~same)
j. div vs. div_l, got 627877.390 (bin frac=800),	expected 627877.390816 (~same)

n1 = -396347.-921 (bin frac=-1888)  (fxp int is -811720544)
n2 = 762518.242 (bin frac=497)  (fxp int is 1561637361)
n3 = 0.590 (bin frac=1210)  (fxp int is 1210, always in (-1,1) )
a. sum vs. sum_l, got 366170.320 (bin frac=657),	expected 366170.320957 (~same)
b. sum vs. sum_l, got -396347.-330 (bin frac=-678),	expected -396347.331216 (~same)
c. mul vs. mul_l, got -INF,	expected -1048576.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -1048576.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -1048576.000000 (~same)
f. mul vs. mul_l, got -234170.-402 (bin frac=-825),	expected -234170.403029 (~same)
g. mul vs. mul_d, got -234170.-402 (bin frac=-825),	expected -234170.403517 (~same)
h. mul_l vs. mul_d, got -234170.-402 (bin frac=-825),	expected -234170.403517 (~same)
i. div vs. div_l, got -0.-519 (bin frac=-1064),	expected -0.519785 (~same)
j. div vs. div_l, got -670843.-424 (bin frac=-869),	expected -670843.424524 (~same)

n1 = -76166. -4 (bin frac=-10)  (fxp int is -155987978)
n2 = -724417.-932 (bin frac=-1911)  (fxp int is -1483607927)
n3 = 0.273 (bin frac=561)  (fxp int is 561, always in (-1,1) )
a. sum vs. sum_l, got -800583.-937 (bin frac=-1921),	expected -800583.938447 (~same)
b. sum vs. sum_l, got -76165.-730 (bin frac=-1497),	expected -76165.731314 (~same)
c. mul vs. mul_l, got +INF,	expected 1048576.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 1048576.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 1048576.000000 (~same)
f. mul vs. mul_l, got -20863.-831 (bin frac=-1704),	expected -20863.832438 (~same)
g. mul vs. mul_d, got -20863.-831 (bin frac=-1704),	expected -20863.832926 (~same)
h. mul_l vs. mul_d, got -20863.-831 (bin frac=-1704),	expected -20863.832926 (~same)
i. div vs. div_l, got 0.104 (bin frac=215),	expected 0.105032 (~same)
j. div vs. div_l, got -278053.-436 (bin frac=-894),	expected -278053.436737 (~same)

n1 = -977055.-174 (bin frac=-358)  (fxp int is -2001008998)
n2 = 228094.  6 (bin frac=14)  (fxp int is 467136526)
n3 = -0.-822 (bin frac=-1686)  (fxp int is -1686, always in (-1,1) )
a. sum vs. sum_l, got -748961.-167 (bin frac=-344),	expected -748961.168051 (~same)
b. sum vs. sum_l, got -977055.-997 (bin frac=-2044),	expected -977055.998534 (~same)
c. mul vs. mul_l, got -INF,	expected -1048576.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -1048576.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -1048576.000000 (~same)
f. mul vs. mul_l, got 804353. 39 (bin frac=80),	expected 804353.039082 (~same)
g. mul vs. mul_d, got 804353. 39 (bin frac=80),	expected 804353.039082 (~same)
h. mul_l vs. mul_d, got 804353. 39 (bin frac=80),	expected 804353.039082 (~same)
i. div vs. div_l, got -4.-283 (bin frac=-580),	expected -4.283341 (~same)
j. div vs. div_l, got +INF,	expected 1048576.000000 (~same)

0 Warnings for 11 frac bits.
Largest delta was: 4.885198E-04
All tests passed using 11-bit fracs, and '999' as max decimal frac.


========================
FXP configuration parameters:
frac bits   : 14 (requested was 14)
whole bits  : 18
pos infinity: 2147483647 (Lf: 131072.000000)
whole max   : 131071
frac mask   : 16383
frac max    : 16383 (->decimals: .9999)
whole min   : -131071
neg infinity: -2147483647 (Lf: -131072.000000)
undefined   : -2147483648 (Lf: -131072.000000)
max_ok_delta: 8.894237E-03
max_delta   : 1.556491E-02

Checking extreme int values, part I:
Infinity, got +INF,	expected 131072.000000 (~same)
Largest, got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
HalfMax, got 65535.9999 (bin frac=16383),	expected 65535.999969 (~same)
Largest frac, got 0.9999 (bin frac=16383),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.000061 (~same)
0.5, got 0.4999 (bin frac=8192),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.000061 (~same)
-Largest frac, got -0.-9999 (bin frac=-16383),	expected -1.000000 (~same)
Most negative, got -131071.-9998 (bin frac=-16382),	expected -131071.999939 (~same)
-Infinity, got -INF,	expected -131072.000000 (~same)
Undefined, got UNDEF,	expected -131072.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -131071.-9997 (bin frac=-16381),	expected -131071.999878 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
-Largest - 0, got -131071.-9998 (bin frac=-16382),	expected -131071.999939 (~same)
Largest - tiniest, got 131071.9997 (bin frac=16381),	expected 131071.999878 (~same)
Largest + tiniest safe, got +INF,	expected 131072.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 131072.000000 (~same)
+inf + +inf, got +INF,	expected 131072.000000 (~same)
-inf - +inf, got -INF,	expected -131072.000000 (~same)
+inf + -inf, got UNDEF,	expected -131072.000000 (~same)
-inf + -inf, got -INF,	expected -131072.000000 (~same)
-inf - -inf, got UNDEF,	expected -131072.000000 (~same)
+inf * -inf, got -INF,	expected -131072.000000 (~same)
+inf - 0.5, got +INF,	expected 131072.000000 (~same)
-inf + 0.5, got -INF,	expected -131072.000000 (~same)
+num / zero, got +INF,	expected 131072.000000 (~same)
zero / zero, got UNDEF,	expected -131072.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -131072.000000 (~same)
zero * +inf, got UNDEF,	expected -131072.000000 (~same)
zero * -inf, got UNDEF,	expected -131072.000000 (~same)
zero * undef, got UNDEF,	expected -131072.000000 (~same)
-inf * undef, got UNDEF,	expected -131072.000000 (~same)
+inf * undef, got UNDEF,	expected -131072.000000 (~same)
undef * undef, got UNDEF,	expected -131072.000000 (~same)
tiniest * inf, got +INF,	expected 131072.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 131072.000000 (~same)
Largest * 1, got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
Largest * -1, got -131071.-9998 (bin frac=-16382),	expected -131071.999939 (~same)
Largest + two safe, got +INF,	expected 131072.000000 (~same)
Largest + two unsafe, got -131070. -1 (bin frac=-2),	expected -131070.000122 (~same)
Safe Too neg substraction, got -INF,	expected -131072.000000 (~same)
Unsafe Too neg substraction, got 131071.5001 (bin frac=8194),	expected 131071.500153 (~same)
Largest + 0.5, got +INF,	expected 131072.000000 (~same)
-Largest - 0.5, got -INF,	expected -131072.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 131072.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -131072.000000 (~same)
HalfMax + HalfMax, got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
FXP_MAX - HalfMax, got 65535.9999 (bin frac=16383),	expected 65536.000000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 131072.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -131072.000000 (~same)
HalfMax * 2, got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
HalfMax * 2 (long), got 131071.9998 (bin frac=16382),	expected 131071.999939 (~same)
HalfMax * 3, got +INF,	expected 131072.000000 (~same)
-HalfMax * 3, got -INF,	expected -131072.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 131072.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 131072.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999 (bin 16383)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=1)
Showing fxp for 0.  2: 0.  1 (bin frac=3)
Showing fxp for 0.  3: 0.  2 (bin frac=4)
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)
:
Showing fxp for 0.4998: 0.4997 (bin frac=8189)
Showing fxp for 0.4999: 0.4998 (bin frac=8190)
Showing fxp for 0.5000: 0.4999 (bin frac=8192)
Showing fxp for 0.5001: 0.5000 (bin frac=8193)
Showing fxp for 0.5002: 0.5001 (bin frac=8195)
:
Showing fxp for 0.9994: 0.9993 (bin frac=16374)
Showing fxp for 0.9995: 0.9994 (bin frac=16376)
Showing fxp for 0.9996: 0.9995 (bin frac=16378)
Showing fxp for 0.9997: 0.9996 (bin frac=16379)
Showing fxp for 0.9998: 0.9997 (bin frac=16381)
Showing fxp for 0.9999: 0.9999 (bin frac=16383)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.499 (bin frac=8199),	expected 0.500000 (~same)
-0.(-)500, got -0.-499 (bin frac=-8199),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.221 (bin frac=3640),	expected 0.222000 (~same)
0.777777, got 0.776 (bin frac=12742),	expected 0.777000 (~same)
0.991999, got 0.990 (bin frac=16251),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=16383),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.9999 (bin frac=16383),	expected 1.000000 (~same)
0.5 + maxfrac, got 1.4999 (bin frac=8191),	expected 1.500000 (~same)
maxfrac +tiniest, got 1.  0 (bin frac=0),	expected 1.000000 (~same)
-maxfrac -tiniest, got -1.  0 (bin frac=0),	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Simple ops when using 3 or more bits for the whole part:
 1 + 1, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
-1 - 1, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
Ok sum == 2, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
Ok sum == -2, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
 num, got 0.4999 (bin frac=8191),	expected 0.499969 (~same)
 num +  2, got 2.4999 (bin frac=8191),	expected 2.499969 (~same)
 num + -2, got -1.-5000 (bin frac=-8193),	expected -1.500031 (~same)
-num +  2, got 1.5000 (bin frac=8193),	expected 1.500031 (~same)
-num + -2, got -2.-4999 (bin frac=-8191),	expected -2.499969 (~same)
 num -  2, got -1.-5000 (bin frac=-8193),	expected -1.500031 (~same)
 num - -2, got 2.4999 (bin frac=8191),	expected 2.499969 (~same)
-num -  2, got -2.-4999 (bin frac=-8191),	expected -2.499969 (~same)
-num - -2, got 1.5000 (bin frac=8193),	expected 1.500031 (~same)
 num *  2, got 0.9998 (bin frac=16382),	expected 0.999939 (~same)
 num * -2, got -0.-9998 (bin frac=-16382),	expected -0.999939 (~same)
-num *  2, got -0.-9998 (bin frac=-16382),	expected -0.999939 (~same)
-num * -2, got 0.9998 (bin frac=16382),	expected 0.999939 (~same)
 num *  2 (long), got 0.9998 (bin frac=16382),	expected 0.999939 (~same)
 num * -2 (long), got -0.-9998 (bin frac=-16382),	expected -0.999939 (~same)
-num *  2 (long), got -0.-9998 (bin frac=-16382),	expected -0.999939 (~same)
-num * -2 (long), got 0.9998 (bin frac=16382),	expected 0.999939 (~same)
 num /  2, got 0.2499 (bin frac=4095),	expected 0.249985 (~same)
 num / -2, got -0.-2499 (bin frac=-4095),	expected -0.249985 (~same)
-num /  2, got -0.-2499 (bin frac=-4095),	expected -0.249985 (~same)
-num / -2, got 0.2499 (bin frac=4095),	expected 0.249985 (~same)

Verifying different op implementations using random numbers:

n1 = 99068.9753 (bin frac=15981)  (fxp int is 1623146093)
n2 = 51806.9324 (bin frac=15278)  (fxp int is 848804782)
n3 = -0.-6421 (bin frac=-10522)  (fxp int is -10522, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 131072.000000 (~same)
b. sum vs. sum_l, got 99068.3331 (bin frac=5459),	expected 99068.333211 (~same)
c. mul vs. mul_l, got +INF,	expected 131072.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 131072.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 131072.000000 (~same)
f. mul vs. mul_l, got -63623.-2762 (bin frac=-4527),	expected -63623.276323 (~same)
g. mul vs. mul_d, got -63623.-2762 (bin frac=-4527),	expected -63623.276384 (~same)
h. mul_l vs. mul_d, got -63623.-2762 (bin frac=-4527),	expected -63623.276384 (~same)
i. div vs. div_l, got 1.9121 (bin frac=14946),	expected 1.912287 (~same)
j. div vs. div_l, got -INF,	expected -131072.000000 (~same)

n1 = -40722.-7723 (bin frac=-12654)  (fxp int is -667201902)
n2 = 96078.6387 (bin frac=10466)  (fxp int is 1574152418)
n3 = -0.-8232 (bin frac=-13489)  (fxp int is -13489, always in (-1,1) )
a. sum vs. sum_l, got 55355.8664 (bin frac=14196),	expected 55355.866508 (~same)
b. sum vs. sum_l, got -40723.-5956 (bin frac=-9759),	expected -40723.595678 (~same)
c. mul vs. mul_l, got -INF,	expected -131072.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -131072.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -131072.000000 (~same)
f. mul vs. mul_l, got 33527.1896 (bin frac=3108),	expected 33527.189709 (~same)
g. mul vs. mul_d, got 33527.1896 (bin frac=3108),	expected 33527.189709 (~same)
h. mul_l vs. mul_d, got 33527.1896 (bin frac=3108),	expected 33527.189709 (~same)
i. div vs. div_l, got -0.-4238 (bin frac=-6944),	expected -0.423854 (~same)
j. div vs. div_l, got 49462.6659 (bin frac=10912),	expected 49462.666056 (~same)

n1 = -73577.-3185 (bin frac=-5219)  (fxp int is -1205490787)
n2 = -49268.-8933 (bin frac=-14637)  (fxp int is -807221549)
n3 = -0.-5431 (bin frac=-8899)  (fxp int is -8899, always in (-1,1) )
a. sum vs. sum_l, got -122846.-2119 (bin frac=-3472),	expected -122846.211927 (~same)
b. sum vs. sum_l, got -73577.-8616 (bin frac=-14118),	expected -73577.861747 (~same)
c. mul vs. mul_l, got +INF,	expected 131072.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 131072.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 131072.000000 (~same)
f. mul vs. mul_l, got 39963.6570 (bin frac=10765),	expected 39963.657084 (~same)
g. mul vs. mul_d, got 39963.6570 (bin frac=10765),	expected 39963.657084 (~same)
h. mul_l vs. mul_d, got 39963.6570 (bin frac=10765),	expected 39963.657084 (~same)
i. div vs. div_l, got 1.4933 (bin frac=8083),	expected 1.493377 (~same)
j. div vs. div_l, got +INF,	expected 131072.000000 (~same)

n1 = -3987.-6843 (bin frac=-11213)  (fxp int is -65334221)
n2 = -101811.-5542 (bin frac=-9081)  (fxp int is -1668080505)
n3 = -0.-2663 (bin frac=-4364)  (fxp int is -4364, always in (-1,1) )
a. sum vs. sum_l, got -105799.-2386 (bin frac=-3910),	expected -105799.238662 (~same)
b. sum vs. sum_l, got -3987.-9507 (bin frac=-15577),	expected -3987.950803 (~same)
c. mul vs. mul_l, got +INF,	expected 131072.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 131072.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 131072.000000 (~same)
f. mul vs. mul_l, got 1062.1492 (bin frac=2446),	expected 1062.149301 (~same)
g. mul vs. mul_d, got 1062.1492 (bin frac=2446),	expected 1062.149301 (~same)
h. mul_l vs. mul_d, got 1062.1492 (bin frac=2446),	expected 1062.149301 (~same)
i. div vs. div_l, got 0.391 (bin frac=641),	expected 0.039126 (~same)
j. div vs. div_l, got 14971.1780 (bin frac=2917),	expected 14971.178050 (~same)

n1 = -52630.-2791 (bin frac=-4574)  (fxp int is -862294494)
n2 = 56713. 42 (bin frac=70)  (fxp int is 929185862)
n3 = -0.-3343 (bin frac=-5478)  (fxp int is -5478, always in (-1,1) )
a. sum vs. sum_l, got 4082.7250 (bin frac=11880),	expected 4082.725142 (~same)
b. sum vs. sum_l, got -52630.-6135 (bin frac=-10052),	expected -52630.613563 (~same)
c. mul vs. mul_l, got -INF,	expected -131072.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -131072.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -131072.000000 (~same)
f. mul vs. mul_l, got 17596.9646 (bin frac=15805),	expected 17596.964720 (~same)
g. mul vs. mul_d, got 17596.9646 (bin frac=15805),	expected 17596.964720 (~same)
h. mul_l vs. mul_d, got 17596.9646 (bin frac=15805),	expected 17596.964720 (~same)
i. div vs. div_l, got -0.-9279 (bin frac=-15204),	expected -0.928035 (~same)
j. div vs. div_l, got +INF,	expected 131072.000000 (~same)

n1 = 105830.7460 (bin frac=12223)  (fxp int is 1733930943)
n2 = 64100.108 (bin frac=177)  (fxp int is 1050214577)
n3 = 0.9178 (bin frac=15038)  (fxp int is 15038, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 131072.000000 (~same)
b. sum vs. sum_l, got 105831.6638 (bin frac=10877),	expected 105831.663920 (~same)
c. mul vs. mul_l, got +INF,	expected 131072.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 131072.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 131072.000000 (~same)
f. mul vs. mul_l, got 97136.3987 (bin frac=6534),	expected 97136.398828 (~same)
g. mul vs. mul_d, got 97136.3987 (bin frac=6534),	expected 97136.398828 (~same)
h. mul_l vs. mul_d, got 97136.3987 (bin frac=6534),	expected 97136.398828 (~same)
i. div vs. div_l, got 1.6509 (bin frac=10666),	expected 1.651041 (~same)
j. div vs. div_l, got 115303.2944 (bin frac=4825),	expected 115303.294513 (~same)

n1 = -67524.-6720 (bin frac=-11012)  (fxp int is -1106324228)
n2 = 11721.252 (bin frac=414)  (fxp int is 192037278)
n3 = 0.2556 (bin frac=4188)  (fxp int is 4188, always in (-1,1) )
a. sum vs. sum_l, got -55803.-6468 (bin frac=-10598),	expected -55803.646890 (~same)
b. sum vs. sum_l, got -67524.-4164 (bin frac=-6824),	expected -67524.416529 (~same)
c. mul vs. mul_l, got -INF,	expected -131072.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -131072.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -131072.000000 (~same)
f. mul vs. mul_l, got -17260.-3348 (bin frac=-5486),	expected -17260.334859 (~same)
g. mul vs. mul_d, got -17260.-3348 (bin frac=-5486),	expected -17260.334920 (~same)
h. mul_l vs. mul_d, got -17260.-3348 (bin frac=-5486),	expected -17260.334920 (~same)
i. div vs. div_l, got -5.-7609 (bin frac=-12468),	expected -5.761033 (~same)
j. div vs. div_l, got -INF,	expected -131072.000000 (~same)

n1 = -99044.-5164 (bin frac=-8462)  (fxp int is -1622745358)
n2 = 109898.8650 (bin frac=14173)  (fxp int is 1800583005)
n3 = 0.5422 (bin frac=8884)  (fxp int is 8884, always in (-1,1) )
a. sum vs. sum_l, got 10854.3485 (bin frac=5711),	expected 10854.348593 (~same)
b. sum vs. sum_l, got -99043.-9742 (bin frac=-15962),	expected -99043.974303 (~same)
c. mul vs. mul_l, got -INF,	expected -131072.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -131072.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -131072.000000 (~same)
f. mul vs. mul_l, got -53705.-5348 (bin frac=-8764),	expected -53705.534945 (~same)
g. mul vs. mul_d, got -53705.-5348 (bin frac=-8764),	expected -53705.535006 (~same)
h. mul_l vs. mul_d, got -53705.-5348 (bin frac=-8764),	expected -53705.535006 (~same)
i. div vs. div_l, got -0.-9011 (bin frac=-14765),	expected -0.901239 (~same)
j. div vs. div_l, got -INF,	expected -131072.000000 (~same)

n1 = 55002.2449 (bin frac=4014)  (fxp int is 901156782)
n2 = 47268.2427 (bin frac=3977)  (fxp int is 774442889)
n3 = -0.-7474 (bin frac=-12246)  (fxp int is -12246, always in (-1,1) )
a. sum vs. sum_l, got 102270.4877 (bin frac=7991),	expected 102270.487762 (~same)
b. sum vs. sum_l, got 55001.4975 (bin frac=8152),	expected 55001.497589 (~same)
c. mul vs. mul_l, got +INF,	expected 131072.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 131072.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 131072.000000 (~same)
f. mul vs. mul_l, got -41110.-6867 (bin frac=-11252),	expected -41110.686809 (~same)
g. mul vs. mul_d, got -41110.-6867 (bin frac=-11252),	expected -41110.686871 (~same)
h. mul_l vs. mul_d, got -41110.-6867 (bin frac=-11252),	expected -41110.686871 (~same)
i. div vs. div_l, got 1.1635 (bin frac=2680),	expected 1.163584 (~same)
j. div vs. div_l, got -73587.-8475 (bin frac=-13887),	expected -73587.847647 (~same)

n1 = -80995.-7674 (bin frac=-12574)  (fxp int is -1327034654)
n2 = 7162.859 (bin frac=1408)  (fxp int is 117343616)
n3 = 0.3277 (bin frac=5370)  (fxp int is 5370, always in (-1,1) )
a. sum vs. sum_l, got -73833.-6814 (bin frac=-11166),	expected -73833.681560 (~same)
b. sum vs. sum_l, got -80995.-4396 (bin frac=-7204),	expected -80995.439724 (~same)
c. mul vs. mul_l, got -INF,	expected -131072.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -131072.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -131072.000000 (~same)
f. mul vs. mul_l, got -26547.-746 (bin frac=-1223),	expected -26547.074651 (~same)
g. mul vs. mul_d, got -26547.-746 (bin frac=-1223),	expected -26547.074712 (~same)
h. mul_l vs. mul_d, got -26547.-746 (bin frac=-1223),	expected -26547.074712 (~same)
i. div vs. div_l, got -11.-3089 (bin frac=-5062),	expected -11.308979 (~same)
j. div vs. div_l, got -INF,	expected -131072.000000 (~same)

0 Warnings for 14 frac bits.
Largest delta was: 6.103888E-05
All tests passed using 14-bit fracs, and '9999' as max decimal frac.


========================
FXP configuration parameters:
frac bits   : 16 (requested was 16)
whole bits  : 16
pos infinity: 2147483647 (Lf: 32768.000000)
whole max   : 32767
frac mask   : 65535
frac max    : 65535 (->decimals: .9999)
whole min   : -32767
neg infinity: -2147483647 (Lf: -32768.000000)
undefined   : -2147483648 (Lf: -32768.000000)
max_ok_delta: 4.455634E-03
max_delta   : 7.797360E-03

Checking extreme int values, part I:
Infinity, got +INF,	expected 32768.000000 (~same)
Largest, got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
HalfMax, got 16383.9999 (bin frac=65535),	expected 16383.999992 (~same)
Largest frac, got 0.9999 (bin frac=65535),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.000015 (~same)
0.5, got 0.4999 (bin frac=32768),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.000015 (~same)
-Largest frac, got -0.-9999 (bin frac=-65535),	expected -1.000000 (~same)
Most negative, got -32767.-9998 (bin frac=-65534),	expected -32767.999985 (~same)
-Infinity, got -INF,	expected -32768.000000 (~same)
Undefined, got UNDEF,	expected -32768.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -32767.-9998 (bin frac=-65533),	expected -32767.999969 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
-Largest - 0, got -32767.-9998 (bin frac=-65534),	expected -32767.999985 (~same)
Largest - tiniest, got 32767.9998 (bin frac=65533),	expected 32767.999969 (~same)
Largest + tiniest safe, got +INF,	expected 32768.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 32768.000000 (~same)
+inf + +inf, got +INF,	expected 32768.000000 (~same)
-inf - +inf, got -INF,	expected -32768.000000 (~same)
+inf + -inf, got UNDEF,	expected -32768.000000 (~same)
-inf + -inf, got -INF,	expected -32768.000000 (~same)
-inf - -inf, got UNDEF,	expected -32768.000000 (~same)
+inf * -inf, got -INF,	expected -32768.000000 (~same)
+inf - 0.5, got +INF,	expected 32768.000000 (~same)
-inf + 0.5, got -INF,	expected -32768.000000 (~same)
+num / zero, got +INF,	expected 32768.000000 (~same)
zero / zero, got UNDEF,	expected -32768.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -32768.000000 (~same)
zero * +inf, got UNDEF,	expected -32768.000000 (~same)
zero * -inf, got UNDEF,	expected -32768.000000 (~same)
zero * undef, got UNDEF,	expected -32768.000000 (~same)
-inf * undef, got UNDEF,	expected -32768.000000 (~same)
+inf * undef, got UNDEF,	expected -32768.000000 (~same)
undef * undef, got UNDEF,	expected -32768.000000 (~same)
tiniest * inf, got +INF,	expected 32768.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 32768.000000 (~same)
Largest * 1, got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
Largest * -1, got -32767.-9998 (bin frac=-65534),	expected -32767.999985 (~same)
Largest + two safe, got +INF,	expected 32768.000000 (~same)
Largest + two unsafe, got -32766.  0 (bin frac=-2),	expected -32766.000031 (~same)
Safe Too neg substraction, got -INF,	expected -32768.000000 (~same)
Unsafe Too neg substraction, got 32767.4999 (bin frac=32770),	expected 32767.500038 (~same)
Largest + 0.5, got +INF,	expected 32768.000000 (~same)
-Largest - 0.5, got -INF,	expected -32768.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 32768.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -32768.000000 (~same)
HalfMax + HalfMax, got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
FXP_MAX - HalfMax, got 16383.9999 (bin frac=65535),	expected 16384.000000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 32768.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -32768.000000 (~same)
HalfMax * 2, got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
HalfMax * 2 (long), got 32767.9998 (bin frac=65534),	expected 32767.999985 (~same)
HalfMax * 3, got +INF,	expected 32768.000000 (~same)
-HalfMax * 3, got -INF,	expected -32768.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 32768.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 32768.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999 (bin 65535)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=6)
Showing fxp for 0.  2: 0.  1 (bin frac=13)
Showing fxp for 0.  3: 0.  2 (bin frac=19)
Showing fxp for 0.  4: 0.  3 (bin frac=26)
Showing fxp for 0.  5: 0.  4 (bin frac=32)
:
Showing fxp for 0.4998: 0.4997 (bin frac=32757)
Showing fxp for 0.4999: 0.4998 (bin frac=32764)
Showing fxp for 0.5000: 0.4999 (bin frac=32770)
Showing fxp for 0.5001: 0.5000 (bin frac=32777)
Showing fxp for 0.5002: 0.5001 (bin frac=32783)
:
Showing fxp for 0.9994: 0.9993 (bin frac=65502)
Showing fxp for 0.9995: 0.9994 (bin frac=65508)
Showing fxp for 0.9996: 0.9995 (bin frac=65515)
Showing fxp for 0.9997: 0.9996 (bin frac=65521)
Showing fxp for 0.9998: 0.9997 (bin frac=65528)
Showing fxp for 0.9999: 0.9999 (bin frac=65535)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.499 (bin frac=32800),	expected 0.500000 (~same)
-0.(-)500, got -0.-499 (bin frac=-32800),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.221 (bin frac=14563),	expected 0.222000 (~same)
0.777777, got 0.776 (bin frac=50971),	expected 0.777000 (~same)
0.991999, got 0.990 (bin frac=65010),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=65535),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.9999 (bin frac=65535),	expected 1.000000 (~same)
0.5 + maxfrac, got 1.4999 (bin frac=32767),	expected 1.500000 (~same)
maxfrac +tiniest, got 1.  0 (bin frac=0),	expected 1.000000 (~same)
-maxfrac -tiniest, got -1.  0 (bin frac=0),	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Simple ops when using 3 or more bits for the whole part:
 1 + 1, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
-1 - 1, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
Ok sum == 2, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
Ok sum == -2, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
 num, got 0.4999 (bin frac=32767),	expected 0.499992 (~same)
 num +  2, got 2.4999 (bin frac=32767),	expected 2.499992 (~same)
 num + -2, got -1.-4999 (bin frac=-32769),	expected -1.500008 (~same)
-num +  2, got 1.4999 (bin frac=32769),	expected 1.500008 (~same)
-num + -2, got -2.-4999 (bin frac=-32767),	expected -2.499992 (~same)
 num -  2, got -1.-4999 (bin frac=-32769),	expected -1.500008 (~same)
 num - -2, got 2.4999 (bin frac=32767),	expected 2.499992 (~same)
-num -  2, got -2.-4999 (bin frac=-32767),	expected -2.499992 (~same)
-num - -2, got 1.4999 (bin frac=32769),	expected 1.500008 (~same)
 num *  2, got 0.9998 (bin frac=65534),	expected 0.999985 (~same)
 num * -2, got -0.-9998 (bin frac=-65534),	expected -0.999985 (~same)
-num *  2, got -0.-9998 (bin frac=-65534),	expected -0.999985 (~same)
-num * -2, got 0.9998 (bin frac=65534),	expected 0.999985 (~same)
 num *  2 (long), got 0.9998 (bin frac=65534),	expected 0.999985 (~same)
 num * -2 (long), got -0.-9998 (bin frac=-65534),	expected -0.999985 (~same)
-num *  2 (long), got -0.-9998 (bin frac=-65534),	expected -0.999985 (~same)
-num * -2 (long), got 0.9998 (bin frac=65534),	expected 0.999985 (~same)
 num /  2, got 0.2499 (bin frac=16383),	expected 0.249996 (~same)
 num / -2, got -0.-2499 (bin frac=-16383),	expected -0.249996 (~same)
-num /  2, got -0.-2499 (bin frac=-16383),	expected -0.249996 (~same)
-num / -2, got 0.2499 (bin frac=16383),	expected 0.249996 (~same)

Verifying different op implementations using random numbers:

n1 = 10358.5847 (bin frac=38328)  (fxp int is 678860216)
n2 = -18819.-7044 (bin frac=-46168)  (fxp int is -1233368152)
n3 = 0.3970 (bin frac=26024)  (fxp int is 26024, always in (-1,1) )
a. sum vs. sum_l, got -8461.-1196 (bin frac=-7840),	expected -8461.119631 (~same)
b. sum vs. sum_l, got 10358.9818 (bin frac=64352),	expected 10358.981949 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got 4113.3393 (bin frac=22243),	expected 4113.339406 (~same)
g. mul vs. mul_d, got 4113.3393 (bin frac=22243),	expected 4113.339406 (~same)
h. mul_l vs. mul_d, got 4113.3393 (bin frac=22243),	expected 4113.339406 (~same)
i. div vs. div_l, got -0.-5503 (bin frac=-36071),	expected -0.550408 (~same)
j. div vs. div_l, got 26085.9289 (bin frac=60882),	expected 26085.929000 (~same)

n1 = 2936.9551 (bin frac=62605)  (fxp int is 192476301)
n2 = -11767.-451 (bin frac=-2962)  (fxp int is -771165074)
n3 = -0.-1507 (bin frac=-9878)  (fxp int is -9878, always in (-1,1) )
a. sum vs. sum_l, got -8830.-899 (bin frac=-5893),	expected -8830.089921 (~same)
b. sum vs. sum_l, got 2936.8044 (bin frac=52727),	expected 2936.804562 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got -442.-6763 (bin frac=-44332),	expected -442.676463 (~same)
g. mul vs. mul_d, got -442.-6763 (bin frac=-44332),	expected -442.676478 (~same)
h. mul_l vs. mul_d, got -442.-6763 (bin frac=-44332),	expected -442.676478 (~same)
i. div vs. div_l, got -0.-2495 (bin frac=-16357),	expected -0.249592 (~same)
j. div vs. div_l, got -19485.-3513 (bin frac=-23028),	expected -19485.351385 (~same)

n1 = 30177.2668 (bin frac=17488)  (fxp int is 1977697360)
n2 = -5078.-9979 (bin frac=-65404)  (fxp int is -332857212)
n3 = -0.-3113 (bin frac=-20409)  (fxp int is -20409, always in (-1,1) )
a. sum vs. sum_l, got 25098.2688 (bin frac=17620),	expected 25098.268864 (~same)
b. sum vs. sum_l, got 30176.9553 (bin frac=62615),	expected 30176.955444 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got -9397.-7025 (bin frac=-46047),	expected -9397.702632 (~same)
g. mul vs. mul_d, got -9397.-7025 (bin frac=-46047),	expected -9397.702647 (~same)
h. mul_l vs. mul_d, got -9397.-7025 (bin frac=-46047),	expected -9397.702647 (~same)
i. div vs. div_l, got -5.-9414 (bin frac=-61707),	expected -5.941588 (~same)
j. div vs. div_l, got -INF,	expected -32768.000000 (~same)

n1 = 6752.768 (bin frac=5035)  (fxp int is 442504107)
n2 = 25325.6888 (bin frac=45148)  (fxp int is 1659744348)
n3 = -0.-3570 (bin frac=-23404)  (fxp int is -23404, always in (-1,1) )
a. sum vs. sum_l, got 32077.7656 (bin frac=50183),	expected 32077.765743 (~same)
b. sum vs. sum_l, got 6751.7196 (bin frac=47167),	expected 6751.719722 (~same)
c. mul vs. mul_l, got +INF,	expected 32768.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 32768.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 32768.000000 (~same)
f. mul vs. mul_l, got -2411.-2793 (bin frac=-18310),	expected -2411.279393 (~same)
g. mul vs. mul_d, got -2411.-2793 (bin frac=-18310),	expected -2411.279408 (~same)
h. mul_l vs. mul_d, got -2411.-2793 (bin frac=-18310),	expected -2411.279408 (~same)
i. div vs. div_l, got 0.2665 (bin frac=17472),	expected 0.266606 (~same)
j. div vs. div_l, got -18907.-1999 (bin frac=-13102),	expected -18907.199924 (~same)

n1 = -8182.-6416 (bin frac=-42055)  (fxp int is -536257607)
n2 = -23681.-6839 (bin frac=-44828)  (fxp int is -1552002844)
n3 = -0.-6841 (bin frac=-44838)  (fxp int is -44838, always in (-1,1) )
a. sum vs. sum_l, got -31864.-3257 (bin frac=-21347),	expected -31864.325734 (~same)
b. sum vs. sum_l, got -8183.-3258 (bin frac=-21357),	expected -8183.325887 (~same)
c. mul vs. mul_l, got +INF,	expected 32768.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 32768.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 32768.000000 (~same)
f. mul vs. mul_l, got 5598.3472 (bin frac=22760),	expected 5598.347295 (~same)
g. mul vs. mul_d, got 5598.3472 (bin frac=22760),	expected 5598.347295 (~same)
h. mul_l vs. mul_d, got 5598.3472 (bin frac=22760),	expected 5598.347295 (~same)
i. div vs. div_l, got 0.3454 (bin frac=22644),	expected 0.345525 (~same)
j. div vs. div_l, got 11959.8912 (bin frac=58413),	expected 11959.891325 (~same)

n1 = -12872.-7443 (bin frac=-48787)  (fxp int is -843628179)
n2 = 5255.370 (bin frac=2430)  (fxp int is 344394110)
n3 = -0.-5771 (bin frac=-37829)  (fxp int is -37829, always in (-1,1) )
a. sum vs. sum_l, got -7617.-7072 (bin frac=-46357),	expected -7617.707362 (~same)
b. sum vs. sum_l, got -12873.-3216 (bin frac=-21080),	expected -12873.321660 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got 7430.4663 (bin frac=30568),	expected 7430.466453 (~same)
g. mul vs. mul_d, got 7430.4663 (bin frac=30568),	expected 7430.466453 (~same)
h. mul_l vs. mul_d, got 7430.4664 (bin frac=30569),	expected 7430.466453 (~same)
i. div vs. div_l, got -2.-4495 (bin frac=-29465),	expected -2.449607 (~same)
j. div vs. div_l, got 22301.964 (bin frac=6323),	expected 22301.096483 (~same)

n1 = 852.1746 (bin frac=11445)  (fxp int is 55848117)
n2 = 5110.1269 (bin frac=8319)  (fxp int is 334897279)
n3 = -0.-6010 (bin frac=-39394)  (fxp int is -39394, always in (-1,1) )
a. sum vs. sum_l, got 5962.3015 (bin frac=19764),	expected 5962.301579 (~same)
b. sum vs. sum_l, got 851.5734 (bin frac=37587),	expected 851.573541 (~same)
c. mul vs. mul_l, got +INF,	expected 32768.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 32768.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 32768.000000 (~same)
f. mul vs. mul_l, got -512.-2461 (bin frac=-16135),	expected -512.246204 (~same)
g. mul vs. mul_d, got -512.-2461 (bin frac=-16135),	expected -512.246220 (~same)
h. mul_l vs. mul_d, got -512.-2461 (bin frac=-16135),	expected -512.246220 (~same)
i. div vs. div_l, got 0.1667 (bin frac=10928),	expected 0.166751 (~same)
j. div vs. div_l, got -1417.-6807 (bin frac=-44616),	expected -1417.680797 (~same)

n1 = -29290.-673 (bin frac=-4414)  (fxp int is -1919553854)
n2 = -2726.-8293 (bin frac=-54360)  (fxp int is -178705496)
n3 = 0.2450 (bin frac=16064)  (fxp int is 16064, always in (-1,1) )
a. sum vs. sum_l, got -32016.-8967 (bin frac=-58774),	expected -32016.896834 (~same)
b. sum vs. sum_l, got -29289.-8221 (bin frac=-53886),	expected -29289.822248 (~same)
c. mul vs. mul_l, got +INF,	expected 32768.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 32768.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 32768.000000 (~same)
f. mul vs. mul_l, got -7179.-4988 (bin frac=-32697),	expected -7179.498924 (~same)
g. mul vs. mul_d, got -7179.-4988 (bin frac=-32697),	expected -7179.498939 (~same)
h. mul_l vs. mul_d, got -7179.-4988 (bin frac=-32697),	expected -7179.498939 (~same)
i. div vs. div_l, got 10.7413 (bin frac=48590),	expected 10.741436 (~same)
j. div vs. div_l, got -INF,	expected -32768.000000 (~same)

n1 = -1505.-9187 (bin frac=-60217)  (fxp int is -98691897)
n2 = 16407.2276 (bin frac=14922)  (fxp int is 1075264074)
n3 = -0.-1247 (bin frac=-8176)  (fxp int is -8176, always in (-1,1) )
a. sum vs. sum_l, got 14901.3088 (bin frac=20241),	expected 14901.308858 (~same)
b. sum vs. sum_l, got -1506.-435 (bin frac=-2857),	expected -1506.043595 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got 187.8721 (bin frac=57160),	expected 187.872206 (~same)
g. mul vs. mul_d, got 187.8721 (bin frac=57160),	expected 187.872206 (~same)
h. mul_l vs. mul_d, got 187.8721 (bin frac=57160),	expected 187.872206 (~same)
i. div vs. div_l, got -0.-917 (bin frac=-6015),	expected -0.091783 (~same)
j. div vs. div_l, got 12070.9266 (bin frac=60734),	expected 12070.926741 (~same)

n1 = 29576.9829 (bin frac=64421)  (fxp int is 1938357157)
n2 = -23850.-5902 (bin frac=-38683)  (fxp int is -1563072283)
n3 = -0.-4646 (bin frac=-30452)  (fxp int is -30452, always in (-1,1) )
a. sum vs. sum_l, got 5726.3926 (bin frac=25738),	expected 5726.392737 (~same)
b. sum vs. sum_l, got 29576.5182 (bin frac=33969),	expected 29576.518334 (~same)
c. mul vs. mul_l, got -INF,	expected -32768.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -32768.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -32768.000000 (~same)
f. mul vs. mul_l, got -13743.-2599 (bin frac=-17037),	expected -13743.259968 (~same)
g. mul vs. mul_d, got -13743.-2599 (bin frac=-17037),	expected -13743.259983 (~same)
h. mul_l vs. mul_d, got -13743.-2599 (bin frac=-17037),	expected -13743.259983 (~same)
i. div vs. div_l, got -1.-2400 (bin frac=-15734),	expected -1.240085 (~same)
j. div vs. div_l, got -INF,	expected -32768.000000 (~same)

0 Warnings for 16 frac bits.
Largest delta was: 1.525902E-05
All tests passed using 16-bit fracs, and '9999' as max decimal frac.


========================
FXP configuration parameters:
frac bits   : 24 (requested was 24)
whole bits  : 8
pos infinity: 2147483647 (Lf: 128.000000)
whole max   : 127
frac mask   : 16777215
frac max    : 16777215 (->decimals: .9999999)
whole min   : -127
neg infinity: -2147483647 (Lf: -128.000000)
undefined   : -2147483648 (Lf: -128.000000)
max_ok_delta: 5.580017E-04
max_delta   : 9.765030E-04

Checking extreme int values, part I:
Infinity, got +INF,	expected 128.000000 (~same)
Largest, got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
HalfMax, got 63.9999999 (bin frac=16777215),	expected 64.000000 (~same)
Largest frac, got 0.9999999 (bin frac=16777215),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.000000 (~same)
0.5, got 0.4999999 (bin frac=8388608),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.000000 (~same)
-Largest frac, got -0.-9999999 (bin frac=-16777215),	expected -1.000000 (~same)
Most negative, got -127.-9999998 (bin frac=-16777214),	expected -128.000000 (~same)
-Infinity, got -INF,	expected -128.000000 (~same)
Undefined, got UNDEF,	expected -128.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -127.-9999997 (bin frac=-16777213),	expected -128.000000 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
-Largest - 0, got -127.-9999998 (bin frac=-16777214),	expected -128.000000 (~same)
Largest - tiniest, got 127.9999997 (bin frac=16777213),	expected 128.000000 (~same)
Largest + tiniest safe, got +INF,	expected 128.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 128.000000 (~same)
+inf + +inf, got +INF,	expected 128.000000 (~same)
-inf - +inf, got -INF,	expected -128.000000 (~same)
+inf + -inf, got UNDEF,	expected -128.000000 (~same)
-inf + -inf, got -INF,	expected -128.000000 (~same)
-inf - -inf, got UNDEF,	expected -128.000000 (~same)
+inf * -inf, got -INF,	expected -128.000000 (~same)
+inf - 0.5, got +INF,	expected 128.000000 (~same)
-inf + 0.5, got -INF,	expected -128.000000 (~same)
+num / zero, got +INF,	expected 128.000000 (~same)
zero / zero, got UNDEF,	expected -128.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -128.000000 (~same)
zero * +inf, got UNDEF,	expected -128.000000 (~same)
zero * -inf, got UNDEF,	expected -128.000000 (~same)
zero * undef, got UNDEF,	expected -128.000000 (~same)
-inf * undef, got UNDEF,	expected -128.000000 (~same)
+inf * undef, got UNDEF,	expected -128.000000 (~same)
undef * undef, got UNDEF,	expected -128.000000 (~same)
tiniest * inf, got +INF,	expected 128.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 128.000000 (~same)
Largest * 1, got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
Largest * -1, got -127.-9999998 (bin frac=-16777214),	expected -128.000000 (~same)
Largest + two safe, got +INF,	expected 128.000000 (~same)
Largest + two unsafe, got -126. -1 (bin frac=-2),	expected -126.000000 (~same)
Safe Too neg substraction, got -INF,	expected -128.000000 (~same)
Unsafe Too neg substraction, got 127.5000000 (bin frac=8388610),	expected 127.500000 (~same)
Largest + 0.5, got +INF,	expected 128.000000 (~same)
-Largest - 0.5, got -INF,	expected -128.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 128.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -128.000000 (~same)
HalfMax + HalfMax, got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
FXP_MAX - HalfMax, got 63.9999999 (bin frac=16777215),	expected 64.000000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 128.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -128.000000 (~same)
HalfMax * 2, got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
HalfMax * 2 (long), got 127.9999998 (bin frac=16777214),	expected 128.000000 (~same)
HalfMax * 3, got +INF,	expected 128.000000 (~same)
-HalfMax * 3, got -INF,	expected -128.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 128.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 128.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999999 (bin 16777215)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=1)
Showing fxp for 0.  2: 0.  1 (bin frac=3)
Showing fxp for 0.  3: 0.  2 (bin frac=5)
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)
:
Showing fxp for 0.4999998: 0.4999997 (bin frac=8388604)
Showing fxp for 0.4999999: 0.4999998 (bin frac=8388606)
Showing fxp for 0.5000000: 0.4999999 (bin frac=8388608)
Showing fxp for 0.5000001: 0.5000000 (bin frac=8388610)
Showing fxp for 0.5000002: 0.5000001 (bin frac=8388611)
:
Showing fxp for 0.9999994: 0.9999993 (bin frac=16777206)
Showing fxp for 0.9999995: 0.9999994 (bin frac=16777208)
Showing fxp for 0.9999996: 0.9999995 (bin frac=16777209)
Showing fxp for 0.9999997: 0.9999996 (bin frac=16777211)
Showing fxp for 0.9999998: 0.9999997 (bin frac=16777213)
Showing fxp for 0.9999999: 0.9999999 (bin frac=16777215)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.499 (bin frac=8397004),	expected 0.500000 (~same)
-0.(-)500, got -0.-499 (bin frac=-8397004),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.222 (bin frac=3728270),	expected 0.222000 (~same)
0.777777, got 0.777 (bin frac=13048945),	expected 0.777000 (~same)
0.991999, got 0.990 (bin frac=16642862),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=16777215),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.9999999 (bin frac=16777215),	expected 1.000000 (~same)
0.5 + maxfrac, got 1.4999999 (bin frac=8388607),	expected 1.500000 (~same)
maxfrac +tiniest, got 1.  0 (bin frac=0),	expected 1.000000 (~same)
-maxfrac -tiniest, got -1.  0 (bin frac=0),	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Simple ops when using 3 or more bits for the whole part:
 1 + 1, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
-1 - 1, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
Ok sum == 2, got 2.  0 (bin frac=0),	expected 2.000000 (~same)
Ok sum == -2, got -2.  0 (bin frac=0),	expected -2.000000 (~same)
 num, got 0.4999999 (bin frac=8388607),	expected 0.500000 (~same)
 num +  2, got 2.4999999 (bin frac=8388607),	expected 2.500000 (~same)
 num + -2, got -1.-5000000 (bin frac=-8388609),	expected -1.500000 (~same)
-num +  2, got 1.5000000 (bin frac=8388609),	expected 1.500000 (~same)
-num + -2, got -2.-4999999 (bin frac=-8388607),	expected -2.500000 (~same)
 num -  2, got -1.-5000000 (bin frac=-8388609),	expected -1.500000 (~same)
 num - -2, got 2.4999999 (bin frac=8388607),	expected 2.500000 (~same)
-num -  2, got -2.-4999999 (bin frac=-8388607),	expected -2.500000 (~same)
-num - -2, got 1.5000000 (bin frac=8388609),	expected 1.500000 (~same)
 num *  2, got 0.9999998 (bin frac=16777214),	expected 1.000000 (~same)
 num * -2, got -0.-9999998 (bin frac=-16777214),	expected -1.000000 (~same)
-num *  2, got -0.-9999998 (bin frac=-16777214),	expected -1.000000 (~same)
-num * -2, got 0.9999998 (bin frac=16777214),	expected 1.000000 (~same)
 num *  2 (long), got 0.9999998 (bin frac=16777214),	expected 1.000000 (~same)
 num * -2 (long), got -0.-9999998 (bin frac=-16777214),	expected -1.000000 (~same)
-num *  2 (long), got -0.-9999998 (bin frac=-16777214),	expected -1.000000 (~same)
-num * -2 (long), got 0.9999998 (bin frac=16777214),	expected 1.000000 (~same)
 num /  2, got 0.2499999 (bin frac=4194303),	expected 0.250000 (~same)
 num / -2, got -0.-2499999 (bin frac=-4194303),	expected -0.250000 (~same)
-num /  2, got -0.-2499999 (bin frac=-4194303),	expected -0.250000 (~same)
-num / -2, got 0.2499999 (bin frac=4194303),	expected 0.250000 (~same)

Verifying different op implementations using random numbers:

n1 = -36.-9377334 (bin frac=-15732558)  (fxp int is -619712334)
n2 = 9.6490169 (bin frac=10888698)  (fxp int is 161883642)
n3 = -0.-8936476 (bin frac=-14992921)  (fxp int is -14992921, always in (-1,1) )
a. sum vs. sum_l, got -27.-2887165 (bin frac=-4843860),	expected -27.288717 (~same)
b. sum vs. sum_l, got -37.-8313812 (bin frac=-13948263),	expected -37.831381 (~same)
c. mul vs. mul_l, got -INF,	expected -128.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -128.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -128.000000 (~same)
f. mul vs. mul_l, got 33.93024 (bin frac=156070),	expected 33.009322 (~same)
g. mul vs. mul_d, got 33.93024 (bin frac=156070),	expected 33.009322 (~same)
h. mul_l vs. mul_d, got 33.93216 (bin frac=156392),	expected 33.009322 (~same)
i. div vs. div_l, got -3.-8281343 (bin frac=-13893789),	expected -3.828134 (~same)
j. div vs. div_l, got 41.3336623 (bin frac=5597925),	expected 41.333662 (~same)

n1 = 55.5564088 (bin frac=9334991)  (fxp int is 932081871)
n2 = 53.9453160 (bin frac=15859772)  (fxp int is 905052220)
n3 = -0.-3440346 (bin frac=-5771944)  (fxp int is -5771944, always in (-1,1) )
a. sum vs. sum_l, got 109.5017248 (bin frac=8417547),	expected 109.501725 (~same)
b. sum vs. sum_l, got 55.2123741 (bin frac=3563047),	expected 55.212374 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got -19.-1133210 (bin frac=-1901211),	expected -19.113331 (~same)
g. mul vs. mul_d, got -19.-1133210 (bin frac=-1901211),	expected -19.113331 (~same)
h. mul_l vs. mul_d, got -19.-1133308 (bin frac=-1901376),	expected -19.113331 (~same)
i. div vs. div_l, got 1.298652 (bin frac=501056),	expected 1.029865 (~same)
j. div vs. div_l, got -INF,	expected -128.000000 (~same)

n1 = 69.2447575 (bin frac=4106350)  (fxp int is 1161734254)
n2 = -17.-4960779 (bin frac=-8322807)  (fxp int is -293535479)
n3 = 0.7674430 (bin frac=12875558)  (fxp int is 12875558, always in (-1,1) )
a. sum vs. sum_l, got 51.7486795 (bin frac=12560759),	expected 51.748680 (~same)
b. sum vs. sum_l, got 70.122005 (bin frac=204692),	expected 70.012201 (~same)
c. mul vs. mul_l, got -INF,	expected -128.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -128.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -128.000000 (~same)
f. mul vs. mul_l, got 53.1414030 (bin frac=2372350),	expected 53.141409 (~same)
g. mul vs. mul_d, got 53.1414030 (bin frac=2372350),	expected 53.141409 (~same)
h. mul_l vs. mul_d, got 53.1414086 (bin frac=2372443),	expected 53.141409 (~same)
i. div vs. div_l, got -3.-9577301 (bin frac=-16068047),	expected -3.957730 (~same)
j. div vs. div_l, got 90.2278762 (bin frac=3823129),	expected 90.227876 (~same)

n1 = -90.-9447956 (bin frac=-15851042)  (fxp int is -1525800482)
n2 = -126.-3938988 (bin frac=-6608526)  (fxp int is -2120537742)
n3 = -0.-5736077 (bin frac=-9623541)  (fxp int is -9623541, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -128.000000 (~same)
b. sum vs. sum_l, got -91.-5184034 (bin frac=-8697367),	expected -91.518404 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got 52.1666240 (bin frac=2795487),	expected 52.166639 (~same)
g. mul vs. mul_d, got 52.1666240 (bin frac=2795487),	expected 52.166639 (~same)
h. mul_l vs. mul_d, got 52.1666389 (bin frac=2795738),	expected 52.166639 (~same)
i. div vs. div_l, got 0.7195346 (bin frac=12071789),	expected 0.719535 (~same)
j. div vs. div_l, got +INF,	expected 128.000000 (~same)

n1 = -113.-1262699 (bin frac=-2118458)  (fxp int is -1897943866)
n2 = 68.8390474 (bin frac=14076881)  (fxp int is 1154927569)
n3 = 0.9429013 (bin frac=15819261)  (fxp int is 15819261, always in (-1,1) )
a. sum vs. sum_l, got -44.-2872224 (bin frac=-4818793),	expected -44.287222 (~same)
b. sum vs. sum_l, got -112.-1833684 (bin frac=-3076413),	expected -112.183369 (~same)
c. mul vs. mul_l, got -INF,	expected -128.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -128.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -128.000000 (~same)
f. mul vs. mul_l, got -106.-6669148 (bin frac=-11188975),	expected -106.666922 (~same)
g. mul vs. mul_d, got -106.-6669148 (bin frac=-11188975),	expected -106.666922 (~same)
h. mul_l vs. mul_d, got -106.-6669219 (bin frac=-11189094),	expected -106.666922 (~same)
i. div vs. div_l, got -1.-6433444 (bin frac=-10793529),	expected -1.643345 (~same)
j. div vs. div_l, got -119.-9767716 (bin frac=-16387510),	expected -119.976772 (~same)

n1 = -57.-7943161 (bin frac=-13326414)  (fxp int is -969627726)
n2 = -4.-9311263 (bin frac=-15621709)  (fxp int is -82730573)
n3 = 0.9567755 (bin frac=16052031)  (fxp int is 16052031, always in (-1,1) )
a. sum vs. sum_l, got -62.-7254425 (bin frac=-12170907),	expected -62.725443 (~same)
b. sum vs. sum_l, got -56.-8375405 (bin frac=-14051599),	expected -56.837541 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got -55.-2961722 (bin frac=-4968946),	expected -55.296192 (~same)
g. mul vs. mul_d, got -55.-2961722 (bin frac=-4968946),	expected -55.296192 (~same)
h. mul_l vs. mul_d, got -55.-2961917 (bin frac=-4969274),	expected -55.296192 (~same)
i. div vs. div_l, got 11.7203070 (bin frac=12084748),	expected 11.720307 (~same)
j. div vs. div_l, got -60.-4052985 (bin frac=-6799782),	expected -60.405299 (~same)

n1 = -32.-705580 (bin frac=-1183767)  (fxp int is -538054679)
n2 = -52.-7231275 (bin frac=-12132068)  (fxp int is -884547300)
n3 = 0.5185991 (bin frac=8700650)  (fxp int is 8700650, always in (-1,1) )
a. sum vs. sum_l, got -84.-7936855 (bin frac=-13315835),	expected -84.793686 (~same)
b. sum vs. sum_l, got -31.-5519588 (bin frac=-9260333),	expected -31.551959 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got -16.-6317624 (bin frac=-10599216),	expected -16.631764 (~same)
g. mul vs. mul_d, got -16.-6317624 (bin frac=-10599216),	expected -16.631764 (~same)
h. mul_l vs. mul_d, got -16.-6317641 (bin frac=-10599244),	expected -16.631764 (~same)
i. div vs. div_l, got 0.6082824 (bin frac=10205287),	expected 0.608283 (~same)
j. div vs. div_l, got -61.-8407450 (bin frac=-14105362),	expected -61.840745 (~same)

n1 = 75.5303473 (bin frac=8897752)  (fxp int is 1267188952)
n2 = 30.8101307 (bin frac=13591739)  (fxp int is 516908219)
n3 = -0.-964324 (bin frac=-1617868)  (fxp int is -1617868, always in (-1,1) )
a. sum vs. sum_l, got 106.3404781 (bin frac=5712275),	expected 106.340478 (~same)
b. sum vs. sum_l, got 75.4339148 (bin frac=7279884),	expected 75.433915 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got -7.-2835745 (bin frac=-4757592),	expected -7.283576 (~same)
g. mul vs. mul_d, got -7.-2835745 (bin frac=-4757592),	expected -7.283576 (~same)
h. mul_l vs. mul_d, got -7.-2835762 (bin frac=-4757620),	expected -7.283576 (~same)
i. div vs. div_l, got 2.4514776 (bin frac=7574538),	expected 2.451478 (~same)
j. div vs. div_l, got -INF,	expected -128.000000 (~same)

n1 = -70.-7806539 (bin frac=-13097200)  (fxp int is -1187502320)
n2 = 115.2420319 (bin frac=4060622)  (fxp int is 1933440462)
n3 = 0.17341 (bin frac=29094)  (fxp int is 29094, always in (-1,1) )
a. sum vs. sum_l, got 44.4613779 (bin frac=7740638),	expected 44.461378 (~same)
b. sum vs. sum_l, got -70.-7789197 (bin frac=-13068106),	expected -70.778920 (~same)
c. mul vs. mul_l, got -INF,	expected -128.000000 (~same)
d. mul vs. mul_d, got -INF,	expected -128.000000 (~same)
e. mul_l vs. mul_d, got -INF,	expected -128.000000 (~same)
f. mul vs. mul_l, got -0.-1227433 (bin frac=-2059291),	expected -0.122743 (~same)
g. mul vs. mul_d, got -0.-1227433 (bin frac=-2059291),	expected -0.122743 (~same)
h. mul_l vs. mul_d, got -0.-1227433 (bin frac=-2059292),	expected -0.122743 (~same)
i. div vs. div_l, got -0.-6141912 (bin frac=-10304420),	expected -0.614191 (~same)
j. div vs. div_l, got -INF,	expected -128.000000 (~same)

n1 = -37.-1307838 (bin frac=-2194189)  (fxp int is -622951181)
n2 = -3.-6992602 (bin frac=-11731640)  (fxp int is -62063288)
n3 = 0.1447406 (bin frac=2428345)  (fxp int is 2428345, always in (-1,1) )
a. sum vs. sum_l, got -40.-8300440 (bin frac=-13925829),	expected -40.830044 (~same)
b. sum vs. sum_l, got -36.-9860431 (bin frac=-16543060),	expected -36.986043 (~same)
c. mul vs. mul_l, got +INF,	expected 128.000000 (~same)
d. mul vs. mul_d, got +INF,	expected 128.000000 (~same)
e. mul_l vs. mul_d, got +INF,	expected 128.000000 (~same)
f. mul vs. mul_l, got -5.-3743328 (bin frac=-6280263),	expected -5.374333 (~same)
g. mul vs. mul_d, got -5.-3743328 (bin frac=-6280263),	expected -5.374334 (~same)
h. mul_l vs. mul_d, got -5.-3743334 (bin frac=-6280273),	expected -5.374334 (~same)
i. div vs. div_l, got 10.373538 (bin frac=626693),	expected 10.037354 (~same)
j. div vs. div_l, got -INF,	expected -128.000000 (~same)

0 Warnings for 24 frac bits.
Largest delta was: 1.960993E-05
All tests passed using 24-bit fracs, and '9999999' as max decimal frac.


========================
FXP configuration parameters:
frac bits   : 31 (requested was 31)
whole bits  : 1
pos infinity: 2147483647 (Lf: 1.000000)
whole max   : 0
frac mask   : 2147483647
frac max    : 2147483646 (->decimals: .9999999)
whole min   : 0
neg infinity: -2147483647 (Lf: -1.000000)
undefined   : -2147483648 (Lf: -1.000000)
max_ok_delta: 6.975420E-05
max_delta   : 1.220698E-04

Checking extreme int values, part I:
Infinity, got +INF,	expected 1.000000 (~same)
Largest, got 0.9999999 (bin frac=2147483646),	expected 1.000000 (~same)
HalfMax, got 0.4999999 (bin frac=1073741823),	expected 0.500000 (~same)
Largest frac, got 0.9999999 (bin frac=2147483646),	expected 1.000000 (~same)
tiniest, got 0.  0 (bin frac=1),	expected 0.000000 (~same)
0.5, got 0.4999999 (bin frac=1073741824),	expected 0.500000 (~same)
zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-tiniest, got -0.  0 (bin frac=-1),	expected -0.000000 (~same)
-Largest frac, got -0.-9999999 (bin frac=-2147483646),	expected -1.000000 (~same)
Most negative, got -0.-9999999 (bin frac=-2147483646),	expected -1.000000 (~same)
-Infinity, got -INF,	expected -1.000000 (~same)
Undefined, got UNDEF,	expected -1.000000 (~same)

Checking extreme int values, part II:
Almost most negative, got -0.-9999998 (bin frac=-2147483645),	expected -1.000000 (~same)
 Largest -Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-Largest +Largest, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
Largest + 0, got 0.9999999 (bin frac=2147483646),	expected 1.000000 (~same)
-Largest - 0, got -0.-9999999 (bin frac=-2147483646),	expected -1.000000 (~same)
Largest - tiniest, got 0.9999998 (bin frac=2147483645),	expected 1.000000 (~same)
Largest + tiniest safe, got +INF,	expected 1.000000 (~same)
Largest + tiniest unsafe, got +INF,	expected 1.000000 (~same)
+inf + +inf, got +INF,	expected 1.000000 (~same)
-inf - +inf, got -INF,	expected -1.000000 (~same)
+inf + -inf, got UNDEF,	expected -1.000000 (~same)
-inf + -inf, got -INF,	expected -1.000000 (~same)
-inf - -inf, got UNDEF,	expected -1.000000 (~same)
+inf * -inf, got -INF,	expected -1.000000 (~same)
+inf - 0.5, got +INF,	expected 1.000000 (~same)
-inf + 0.5, got -INF,	expected -1.000000 (~same)
+num / zero, got +INF,	expected 1.000000 (~same)
zero / zero, got UNDEF,	expected -1.000000 (~same)
zero * zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero + zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
zero - zero, got 0.  0 (bin frac=0),	expected 0.000000 (~same)
-num / zero, got -INF,	expected -1.000000 (~same)
zero * +inf, got UNDEF,	expected -1.000000 (~same)
zero * -inf, got UNDEF,	expected -1.000000 (~same)
zero * undef, got UNDEF,	expected -1.000000 (~same)
-inf * undef, got UNDEF,	expected -1.000000 (~same)
+inf * undef, got UNDEF,	expected -1.000000 (~same)
undef * undef, got UNDEF,	expected -1.000000 (~same)
tiniest * inf, got +INF,	expected 1.000000 (~same)

Checking extreme int values, part III:
Way Too Large whole part!, got +INF,	expected 1.000000 (~same)
Largest * 1, got +INF,	expected 1.000000 (~same)
Largest * -1, got -INF,	expected -1.000000 (~same)
Largest + two safe, got +INF,	expected 1.000000 (~same)
Largest + two unsafe, got -0.  0 (bin frac=-3),	expected -0.000000 (~same)
Safe Too neg substraction, got -INF,	expected -1.000000 (~same)
Unsafe Too neg substraction, got 0.4999999 (bin frac=1073741826),	expected 0.500000 (~same)
Largest + 0.5, got +INF,	expected 1.000000 (~same)
-Largest - 0.5, got -INF,	expected -1.000000 (~same)
+HalfMax + HMaxp2, got +INF,	expected 1.000000 (~same)
-HalfMax - HMaxp2, got -INF,	expected -1.000000 (~same)
HalfMax + HalfMax, got 0.9999999 (bin frac=2147483646),	expected 1.000000 (~same)
FXP_MAX - HalfMax, got 0.4999999 (bin frac=1073741823),	expected 0.500000 (~same)
HalfMax + FXP_MAX, got +INF,	expected 1.000000 (~same)
-FXP_MAX - HalfMax, got -INF,	expected -1.000000 (~same)
HalfMax * 2, got +INF,	expected 1.000000 (~same)
HalfMax * 2 (long), got +INF,	expected 1.000000 (~same)
HalfMax * 3, got +INF,	expected 1.000000 (~same)
-HalfMax * 3, got -INF,	expected -1.000000 (~same)
(HalfMax+0.5)*2, got +INF,	expected 1.000000 (~same)
(HalfMax+0.5)*2 (long), got +INF,	expected 1.000000 (~same)

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999999 (bin 2147483646)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=214)
Showing fxp for 0.  2: 0.  1 (bin frac=429)
Showing fxp for 0.  3: 0.  2 (bin frac=644)
Showing fxp for 0.  4: 0.  3 (bin frac=858)
Showing fxp for 0.  5: 0.  4 (bin frac=1073)
:
Showing fxp for 0.4999998: 0.4999997 (bin frac=1073741500)
Showing fxp for 0.4999999: 0.4999998 (bin frac=1073741715)
Showing fxp for 0.5000000: 0.4999999 (bin frac=1073741930)
Showing fxp for 0.5000001: 0.5000000 (bin frac=1073742145)
Showing fxp for 0.5000002: 0.5000001 (bin frac=1073742359)
:
Showing fxp for 0.9999994: 0.9999993 (bin frac=2147482572)
Showing fxp for 0.9999995: 0.9999994 (bin frac=2147482787)
Showing fxp for 0.9999996: 0.9999995 (bin frac=2147483001)
Showing fxp for 0.9999997: 0.9999996 (bin frac=2147483216)
Showing fxp for 0.9999998: 0.9999997 (bin frac=2147483431)
Showing fxp for 0.9999999: 0.9999999 (bin frac=2147483646)

Checking sign taken from frac when whole == 0:
-0.(+)500, got 0.499 (bin frac=1074816639),	expected 0.500000 (~same)
-0.(-)500, got -0.-499 (bin frac=-1074816639),	expected -0.500000 (~same)

Truncation of longer frac decimal arguments:
0.222222, got 0.222 (bin frac=477218588),	expected 0.222000 (~same)
0.777777, got 0.777 (bin frac=1670265058),	expected 0.777000 (~same)
0.991999, got 0.990 (bin frac=2130286579),	expected 0.991000 (~same)
0.999999, got 0.999 (bin frac=2147483646),	expected 0.999000 (~same)

Checking extreme frac values:
maxfrac, got 0.9999999 (bin frac=2147483646),	expected 1.000000 (~same)
0.5 + maxfrac, got +INF,	expected 1.000000 (~same)
maxfrac +tiniest, got +INF,	expected 1.000000 (~same)
-maxfrac -tiniest, got -INF,	expected -1.000000 (~same)
maxfrac - maxfrac, got 0.  0 (bin frac=0),	expected 0.000000 (~same)

Verifying different op implementations using random numbers:

n1 = -0.-6436048 (bin frac=-1382131099)  (fxp int is -1382131099)
n2 = -0.-7259509 (bin frac=-1558968040)  (fxp int is -1558968040)
n3 = 0.6802284 (bin frac=1460779668)  (fxp int is 1460779668, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -1.000000 (~same)
b. sum vs. sum_l, got 0.366235 (bin frac=78648569),	expected 0.036624 (~same)
c. mul vs. mul_l, got 0.4672034 (bin frac=1003311873),	expected 0.467226 (~same)
d. mul vs. mul_d, got 0.4672034 (bin frac=1003311873),	expected 0.467226 (~same)
e. mul_l vs. mul_d, got 0.4672256 (bin frac=1003359542),	expected 0.467226 (~same)
f. mul vs. mul_l, got -0.-4377810 (bin frac=-940127731),	expected -0.437798 (~same)
g. mul vs. mul_d, got -0.-4377810 (bin frac=-940127731),	expected -0.437798 (~same)
h. mul_l vs. mul_d, got -0.-4377984 (bin frac=-940165020),	expected -0.437798 (~same)
i. div vs. div_l, got 0.8865678 (bin frac=1903890174),	expected 0.886568 (~same)
j. div vs. div_l, got -0.-9461597 (bin frac=-2031862846),	expected -0.946160 (~same)

n1 = -0.-2258709 (bin frac=-485054217)  (fxp int is -485054217)
n2 = -0.-7943769 (bin frac=-1705911608)  (fxp int is -1705911608)
n3 = -0.-699929 (bin frac=-150308750)  (fxp int is -150308750, always in (-1,1) )
a. sum vs. sum_l, got -INF,	expected -1.000000 (~same)
b. sum vs. sum_l, got -0.-2958639 (bin frac=-635362967),	expected -0.295864 (~same)
c. mul vs. mul_l, got 0.1794235 (bin frac=385309075),	expected 0.179427 (~same)
d. mul vs. mul_d, got 0.1794235 (bin frac=385309075),	expected 0.179427 (~same)
e. mul_l vs. mul_d, got 0.1794266 (bin frac=385315911),	expected 0.179427 (~same)
f. mul vs. mul_l, got 0.158089 (bin frac=33949533),	expected 0.015809 (~same)
g. mul vs. mul_d, got 0.158089 (bin frac=33949533),	expected 0.015809 (~same)
h. mul_l vs. mul_d, got 0.158093 (bin frac=33950383),	expected 0.015809 (~same)
i. div vs. div_l, got 0.2843372 (bin frac=610609596),	expected 0.284337 (~same)
j. div vs. div_l, got +INF,	expected 1.000000 (~same)

n1 = 0.2893001 (bin frac=621267503)  (fxp int is 621267503)
n2 = 0.2236342 (bin frac=480251013)  (fxp int is 480251013)
n3 = 0.104265 (bin frac=22390933)  (fxp int is 22390933, always in (-1,1) )
a. sum vs. sum_l, got 0.5129344 (bin frac=1101518516),	expected 0.512935 (~same)
b. sum vs. sum_l, got 0.2997267 (bin frac=643658436),	expected 0.299727 (~same)
c. mul vs. mul_l, got 0.646967 (bin frac=138935216),	expected 0.064697 (~same)
d. mul vs. mul_d, got 0.646967 (bin frac=138935216),	expected 0.064697 (~same)
e. mul_l vs. mul_d, got 0.646974 (bin frac=138936726),	expected 0.064697 (~same)
f. mul vs. mul_l, got 0.30163 (bin frac=6477631),	expected 0.003016 (~same)
g. mul vs. mul_d, got 0.30163 (bin frac=6477631),	expected 0.003016 (~same)
h. mul_l vs. mul_d, got 0.30164 (bin frac=6477701),	expected 0.003016 (~same)
i. div vs. div_l, got +INF,	expected 1.000000 (~same)
j. div vs. div_l, got +INF,	expected 1.000000 (~same)

n1 = 0.8104271 (bin frac=1740379218)  (fxp int is 1740379218)
n2 = 0.2008095 (bin frac=431235338)  (fxp int is 431235338)
n3 = -0.-1005771 (bin frac=-215987727)  (fxp int is -215987727, always in (-1,1) )
a. sum vs. sum_l, got +INF,	expected 1.000000 (~same)
b. sum vs. sum_l, got 0.7098500 (bin frac=1524391491),	expected 0.709850 (~same)
c. mul vs. mul_l, got 0.1627409 (bin frac=349483599),	expected 0.162742 (~same)
d. mul vs. mul_d, got 0.1627409 (bin frac=349483599),	expected 0.162742 (~same)
e. mul_l vs. mul_d, got 0.1627415 (bin frac=349484859),	expected 0.162742 (~same)
f. mul vs. mul_l, got -0.-815096 (bin frac=-175040554),	expected -0.081510 (~same)
g. mul vs. mul_d, got -0.-815096 (bin frac=-175040554),	expected -0.081510 (~same)
h. mul_l vs. mul_d, got -0.-815104 (bin frac=-175042334),	expected -0.081510 (~same)
i. div vs. div_l, got +INF,	expected 1.000000 (~same)
j. div vs. div_l, got -INF,	expected -1.000000 (~same)

n1 = 0.8831413 (bin frac=1896531730)  (fxp int is 1896531730)
n2 = -0.-6733489 (bin frac=-1446005932)  (fxp int is -1446005932)
n3 = -0.-2745790 (bin frac=-589654085)  (fxp int is -589654085, always in (-1,1) )
a. sum vs. sum_l, got 0.2097924 (bin frac=450525798),	expected 0.209792 (~same)
b. sum vs. sum_l, got 0.6085622 (bin frac=1306877645),	expected 0.608562 (~same)
c. mul vs. mul_l, got -0.-5946382 (bin frac=-1276976064),	expected -0.594662 (~same)
d. mul vs. mul_d, got -0.-5946382 (bin frac=-1276976064),	expected -0.594662 (~same)
e. mul_l vs. mul_d, got -0.-5946623 (bin frac=-1277027713),	expected -0.594662 (~same)
f. mul vs. mul_l, got -0.-2424813 (bin frac=-520724841),	expected -0.242492 (~same)
g. mul vs. mul_d, got -0.-2424813 (bin frac=-520724841),	expected -0.242492 (~same)
h. mul_l vs. mul_d, got -0.-2424921 (bin frac=-520747938),	expected -0.242492 (~same)
i. div vs. div_l, got -INF,	expected -1.000000 (~same)
j. div vs. div_l, got -INF,	expected -1.000000 (~same)

n1 = 0.4166012 (bin frac=894644384)  (fxp int is 894644384)
n2 = -0.-4425295 (bin frac=-950324968)  (fxp int is -950324968)
n3 = 0.2749630 (bin frac=590478790)  (fxp int is 590478790, always in (-1,1) )
a. sum vs. sum_l, got -0.-259282 (bin frac=-55680584),	expected -0.025928 (~same)
b. sum vs. sum_l, got 0.6915643 (bin frac=1485123174),	expected 0.691564 (~same)
c. mul vs. mul_l, got -0.-1843518 (bin frac=-395892651),	expected -0.184358 (~same)
d. mul vs. mul_d, got -0.-1843518 (bin frac=-395892651),	expected -0.184358 (~same)
e. mul_l vs. mul_d, got -0.-1843583 (bin frac=-395906574),	expected -0.184358 (~same)
f. mul vs. mul_l, got 0.1145453 (bin frac=245984194),	expected 0.114550 (~same)
g. mul vs. mul_d, got 0.1145453 (bin frac=245984194),	expected 0.114550 (~same)
h. mul_l vs. mul_d, got 0.1145499 (bin frac=245994205),	expected 0.114550 (~same)
i. div vs. div_l, got -0.-9414088 (bin frac=-2021660221),	expected -0.941409 (~same)
j. div vs. div_l, got +INF,	expected 1.000000 (~same)

n1 = 0.7549232 (bin frac=1621185502)  (fxp int is 1621185502)
n2 = -0.-9054176 (bin frac=-1944369793)  (fxp int is -1944369793)
n3 = 0.6131658 (bin frac=1316763680)  (fxp int is 1316763680, always in (-1,1) )
a. sum vs. sum_l, got -0.-1504943 (bin frac=-323184291),	expected -0.150494 (~same)
b. sum vs. sum_l, got +INF,	expected 1.000000 (~same)
c. mul vs. mul_l, got -0.-6834950 (bin frac=-1467794632),	expected -0.683521 (~same)
d. mul vs. mul_d, got -0.-6834950 (bin frac=-1467794632),	expected -0.683521 (~same)
e. mul_l vs. mul_d, got -0.-6835209 (bin frac=-1467850114),	expected -0.683521 (~same)
f. mul vs. mul_l, got 0.4628819 (bin frac=994031608),	expected 0.462893 (~same)
g. mul vs. mul_d, got 0.4628819 (bin frac=994031608),	expected 0.462893 (~same)
h. mul_l vs. mul_d, got 0.4628931 (bin frac=994055619),	expected 0.462893 (~same)
i. div vs. div_l, got -0.-8337844 (bin frac=-1790538698),	expected -0.833785 (~same)
j. div vs. div_l, got +INF,	expected 1.000000 (~same)

n1 = 0.5946386 (bin frac=1276976966)  (fxp int is 1276976966)
n2 = -0.-8308903 (bin frac=-1784323696)  (fxp int is -1784323696)
n3 = -0.-4703535 (bin frac=-1010076754)  (fxp int is -1010076754, always in (-1,1) )
a. sum vs. sum_l, got -0.-2362517 (bin frac=-507346730),	expected -0.236252 (~same)
b. sum vs. sum_l, got 0.1242850 (bin frac=266900212),	expected 0.124285 (~same)
c. mul vs. mul_l, got -0.-4940652 (bin frac=-1060997220),	expected -0.494080 (~same)
d. mul vs. mul_d, got -0.-4940652 (bin frac=-1060997220),	expected -0.494080 (~same)
e. mul_l vs. mul_d, got -0.-4940796 (bin frac=-1061027990),	expected -0.494080 (~same)
f. mul vs. mul_l, got -0.-2796878 (bin frac=-600625125),	expected -0.279690 (~same)
g. mul vs. mul_d, got -0.-2796878 (bin frac=-600625125),	expected -0.279690 (~same)
h. mul_l vs. mul_d, got -0.-2796904 (bin frac=-600630766),	expected -0.279690 (~same)
i. div vs. div_l, got -0.-7156643 (bin frac=-1536877618),	expected -0.715664 (~same)
j. div vs. div_l, got -INF,	expected -1.000000 (~same)

n1 = 0.8053139 (bin frac=1729398813)  (fxp int is 1729398813)
n2 = -0.-7204336 (bin frac=-1547119705)  (fxp int is -1547119705)
n3 = 0.3189989 (bin frac=685045110)  (fxp int is 685045110, always in (-1,1) )
a. sum vs. sum_l, got 0.848803 (bin frac=182279108),	expected 0.084880 (~same)
b. sum vs. sum_l, got +INF,	expected 1.000000 (~same)
c. mul vs. mul_l, got -0.-5801594 (bin frac=-1245883032),	expected -0.580175 (~same)
d. mul vs. mul_d, got -0.-5801594 (bin frac=-1245883032),	expected -0.580175 (~same)
e. mul_l vs. mul_d, got -0.-5801753 (bin frac=-1245917278),	expected -0.580175 (~same)
f. mul vs. mul_l, got 0.2568840 (bin frac=551654334),	expected 0.256894 (~same)
g. mul vs. mul_d, got 0.2568840 (bin frac=551654334),	expected 0.256894 (~same)
h. mul_l vs. mul_d, got 0.2568943 (bin frac=551676470),	expected 0.256894 (~same)
i. div vs. div_l, got -INF,	expected -1.000000 (~same)
j. div vs. div_l, got +INF,	expected 1.000000 (~same)

n1 = -0.-1515697 (bin frac=-325493690)  (fxp int is -325493690)
n2 = 0.1327658 (bin frac=285112584)  (fxp int is 285112584)
n3 = -0.-3756126 (bin frac=-806622145)  (fxp int is -806622145, always in (-1,1) )
a. sum vs. sum_l, got -0.-188039 (bin frac=-40381106),	expected -0.018804 (~same)
b. sum vs. sum_l, got -0.-5271824 (bin frac=-1132115835),	expected -0.527183 (~same)
c. mul vs. mul_l, got -0.-201222 (bin frac=-43212274),	expected -0.020123 (~same)
d. mul vs. mul_d, got -0.-201222 (bin frac=-43212274),	expected -0.020123 (~same)
e. mul_l vs. mul_d, got -0.-201232 (bin frac=-43214460),	expected -0.020123 (~same)
f. mul vs. mul_l, got 0.569310 (bin frac=122258441),	expected 0.056932 (~same)
g. mul vs. mul_d, got 0.569310 (bin frac=122258441),	expected 0.056932 (~same)
h. mul_l vs. mul_d, got 0.569315 (bin frac=122259565),	expected 0.056932 (~same)
i. div vs. div_l, got -INF,	expected -1.000000 (~same)
j. div vs. div_l, got 0.4035268 (bin frac=866567303),	expected 0.403527 (~same)

0 Warnings for 31 frac bits.
Largest delta was: 2.583629E-05
All tests passed using 31-bit fracs, and '9999999' as max decimal frac.

Grand total of 0 warnings checking 6 configurations.
Largest delta of all: 6.666667E-02 (using 4 frac bits)
