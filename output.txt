========================
FXP Tester run
========================
Num type sizes in this system:
char        has a size of 1 bytes.
int         has a size of 4 bytes.
long        has a size of 8 bytes.
long long   has a size of 8 bytes.
float       has a size of 4 bytes.
double      has a size of 8 bytes.
long double has a size of 16 bytes.

Testing auto frac max dec:
Attempted frac bits: -1, effective: 0,  auto frac max dec: 9
Attempted frac bits: 0, effective: 0,  auto frac max dec: 9
Attempted frac bits: 1, effective: 1,  auto frac max dec: 9
Attempted frac bits: 2, effective: 2,  auto frac max dec: 9
Attempted frac bits: 3, effective: 3,  auto frac max dec: 9
Attempted frac bits: 4, effective: 4,  auto frac max dec: 9
Attempted frac bits: 5, effective: 5,  auto frac max dec: 9
Attempted frac bits: 6, effective: 6,  auto frac max dec: 9
Attempted frac bits: 7, effective: 7,  auto frac max dec: 99
Attempted frac bits: 8, effective: 8,  auto frac max dec: 99
Attempted frac bits: 9, effective: 9,  auto frac max dec: 99
Attempted frac bits: 10, effective: 10,  auto frac max dec: 999
Attempted frac bits: 11, effective: 11,  auto frac max dec: 999
Attempted frac bits: 12, effective: 12,  auto frac max dec: 999
Attempted frac bits: 13, effective: 13,  auto frac max dec: 999
Attempted frac bits: 14, effective: 14,  auto frac max dec: 9999
Attempted frac bits: 15, effective: 15,  auto frac max dec: 9999
Attempted frac bits: 16, effective: 16,  auto frac max dec: 9999
Attempted frac bits: 17, effective: 17,  auto frac max dec: 99999
Attempted frac bits: 18, effective: 18,  auto frac max dec: 99999
Attempted frac bits: 19, effective: 19,  auto frac max dec: 99999
Attempted frac bits: 20, effective: 20,  auto frac max dec: 999999
Attempted frac bits: 21, effective: 21,  auto frac max dec: 999999
Attempted frac bits: 22, effective: 22,  auto frac max dec: 999999
Attempted frac bits: 23, effective: 23,  auto frac max dec: 999999
Attempted frac bits: 24, effective: 24,  auto frac max dec: 9999999
Attempted frac bits: 25, effective: 25,  auto frac max dec: 9999999
Attempted frac bits: 26, effective: 26,  auto frac max dec: 9999999
Attempted frac bits: 27, effective: 27,  auto frac max dec: 9999999
Attempted frac bits: 28, effective: 28,  auto frac max dec: 9999999
Attempted frac bits: 29, effective: 29,  auto frac max dec: 9999999
Attempted frac bits: 30, effective: 30,  auto frac max dec: 9999999
Attempted frac bits: 31, effective: 31,  auto frac max dec: 9999999
Attempted frac bits: 32, effective: 31,  auto frac max dec: 9999999
Attempted frac bits: 33, effective: 31,  auto frac max dec: 9999999

Testing function that counts in O(log(n)) the # bits used by a number:
Unsigned number 0 uses 0 bits
Unsigned Number 1 uses 1 bits
Unsigned number 1 uses 1 bits
Unsigned Number 2 uses 2 bits
Unsigned number 3 uses 2 bits
Unsigned Number 4 uses 3 bits
Unsigned number 7 uses 3 bits
Unsigned Number 8 uses 4 bits
Unsigned number 15 uses 4 bits
Unsigned Number 16 uses 5 bits
Unsigned number 31 uses 5 bits
Unsigned Number 32 uses 6 bits
Unsigned number 63 uses 6 bits
Unsigned Number 64 uses 7 bits
Unsigned number 127 uses 7 bits
Unsigned Number 128 uses 8 bits
Unsigned number 255 uses 8 bits
Unsigned Number 256 uses 9 bits
Unsigned number 511 uses 9 bits
Unsigned Number 512 uses 10 bits
Unsigned number 1023 uses 10 bits
Unsigned Number 1024 uses 11 bits
Unsigned number 2047 uses 11 bits
Unsigned Number 2048 uses 12 bits
Unsigned number 4095 uses 12 bits
Unsigned Number 4096 uses 13 bits
Unsigned number 8191 uses 13 bits
Unsigned Number 8192 uses 14 bits
Unsigned number 16383 uses 14 bits
Unsigned Number 16384 uses 15 bits
Unsigned number 32767 uses 15 bits
Unsigned Number 32768 uses 16 bits
Unsigned number 65535 uses 16 bits
Unsigned Number 65536 uses 17 bits
Unsigned number 131071 uses 17 bits
Unsigned Number 131072 uses 18 bits
Unsigned number 262143 uses 18 bits
Unsigned Number 262144 uses 19 bits
Unsigned number 524287 uses 19 bits
Unsigned Number 524288 uses 20 bits
Unsigned number 1048575 uses 20 bits
Unsigned Number 1048576 uses 21 bits
Unsigned number 2097151 uses 21 bits
Unsigned Number 2097152 uses 22 bits
Unsigned number 4194303 uses 22 bits
Unsigned Number 4194304 uses 23 bits
Unsigned number 8388607 uses 23 bits
Unsigned Number 8388608 uses 24 bits
Unsigned number 16777215 uses 24 bits
Unsigned Number 16777216 uses 25 bits
Unsigned number 33554431 uses 25 bits
Unsigned Number 33554432 uses 26 bits
Unsigned number 67108863 uses 26 bits
Unsigned Number 67108864 uses 27 bits
Unsigned number 134217727 uses 27 bits
Unsigned Number 134217728 uses 28 bits
Unsigned number 268435455 uses 28 bits
Unsigned Number 268435456 uses 29 bits
Unsigned number 536870911 uses 29 bits
Unsigned Number 536870912 uses 30 bits
Unsigned number 1073741823 uses 30 bits
Unsigned Number 1073741824 uses 31 bits
Unsigned number 2147483647 uses 31 bits
Unsigned Number 2147483648 uses 32 bits
Unsigned Number 4294967295 uses 32 bits

========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 32
frac bits   : 0
whole max   : 2147483646
whole min   : -2147483646
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 0
frac max    : 1 (->decimals: .9)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 1.  0 (bin frac=0),	expected same!
'-tiniest', got -1.  0 (bin frac=0),	expected same!
'Largest', got 2147483646.  0 (bin frac=0),	expected same!
'Largest - tiniest', got 2147483645.  0 (bin frac=0),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -2147483646.  0 (bin frac=0),	expected same!
'Almost most negative', got -2147483645.  0 (bin frac=0),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least two bits for whole part (1-bit sign, 1-bit value):
'Way Too Large whole part!', got +INF,	expected same!
'Largest * 1', got 2147483646.  0 (bin frac=0),	expected same!
'Largest * -1', got -2147483646.  0 (bin frac=0),	expected same!
'one', got 1.  0 (bin frac=0),	expected same!
'Largest + one safe', got +INF,	expected same!
'Largest + one unsafe', got +INF,	expected same!
'Safe Too neg substraction', got -INF,	expected same!
'Unsafe Too neg substraction', got -INF,	expected same!
'+inf - 1', got +INF,	expected same!
'-inf + 1', got -INF,	expected same!
'Half Max + Half Max', got 2147483646.  0 (bin frac=0),	expected same!
'FXP_MAX - Half Max', got 1073741823.  0 (bin frac=0),	expected same!
'Half Max + FXP_MAX', got +INF,	expected same!
'-FXP_MAX - Half Max', got -INF,	expected same!
'Half Max * 2', got 2147483646.  0 (bin frac=0),	expected same!
'Half Max * 2 (long)', got 2147483646.  0 (bin frac=0),	expected same!
'Half Max * 3', got +INF,	expected same!
'-Half Max * 3', got -INF,	expected same!
'Half Max / 0.25', got +INF,	expected same!
'-Half Max / 0.25', got -INF,	expected same!
'(HalfMax+1)*2', got +INF,	expected same!
'(HalfMax+1)*2 (long)', got +INF,	expected same!

Total # of warnings: 0
All tests passed using 0-bit fracs, and '9' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 31
frac bits   : 1
whole max   : 1073741823
whole min   : -1073741823
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 1
frac max    : 1 (->decimals: .9)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  9 (bin frac=1),	expected same!
'-tiniest', got -0. -9 (bin frac=-1),	expected same!
'Largest', got 1073741823.  0 (bin frac=0),	expected same!
'Largest - tiniest', got 1073741822.  9 (bin frac=1),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -1073741823.  0 (bin frac=0),	expected same!
'Almost most negative', got -1073741822. -9 (bin frac=-1),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9 (bin 1)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=0)
Showing fxp for 0.  2: 0.  0 (bin frac=0)
Showing fxp for 0.  3: 0.  0 (bin frac=0)
Showing fxp for 0.  4: 0.  0 (bin frac=0)
Showing fxp for 0.  5: 0.  0 (bin frac=0)

Showing fxp for 0.  3: 0.  0 (bin frac=0)
Showing fxp for 0.  4: 0.  0 (bin frac=0)
Showing fxp for 0.  5: 0.  0 (bin frac=0)
Showing fxp for 0.  6: 0.  0 (bin frac=0)
Showing fxp for 0.  7: 0.  0 (bin frac=0)

Showing fxp for 0.  4: 0.  0 (bin frac=0)
Showing fxp for 0.  5: 0.  0 (bin frac=0)
Showing fxp for 0.  6: 0.  0 (bin frac=0)
Showing fxp for 0.  7: 0.  0 (bin frac=0)
Showing fxp for 0.  8: 0.  0 (bin frac=0)
Showing fxp for 0.  9: 0.  9 (bin frac=1)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.  0 (bin frac=0),	expected same!
'-0.(-)500', got 0.  0 (bin frac=0),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.  0 (bin frac=0),	expected same!
'0.777777', got 0.  0 (bin frac=0),	expected same!
'0.991999', got 0.  0 (bin frac=0),	expected same!
'0.999999', got 0.999 (bin frac=1),	expected same!

Tests that apply when using at least two bits for whole part (1-bit sign, 1-bit value):
'Way Too Large whole part!', got +INF,	expected same!
'Largest * 1', got 1073741823.  0 (bin frac=0),	expected same!
'Largest * -1', got -1073741823.  0 (bin frac=0),	expected same!
'one', got 1.  0 (bin frac=0),	expected same!
'Largest + one safe', got +INF,	expected same!
'Largest + one unsafe', got UNDEF,	expected same!
'Safe Too neg substraction', got -INF,	expected same!
'Unsafe Too neg substraction', got UNDEF,	expected same!
'+inf - 1', got +INF,	expected same!
'-inf + 1', got -INF,	expected same!
'Half Max + Half Max', got 1073741823.  0 (bin frac=0),	expected same!
'FXP_MAX - Half Max', got 536870911.  9 (bin frac=1),	expected same!
'Half Max + FXP_MAX', got +INF,	expected same!
'-FXP_MAX - Half Max', got -INF,	expected same!
'Half Max * 2', got 1073741823.  0 (bin frac=0),	expected same!
'Half Max * 2 (long)', got 1073741823.  0 (bin frac=0),	expected same!
'Half Max * 3', got +INF,	expected same!
'-Half Max * 3', got -INF,	expected same!
'Half Max / 0.25', got +INF,	expected same!
'-Half Max / 0.25', got -INF,	expected same!
'(HalfMax+1)*2', got +INF,	expected same!
'(HalfMax+1)*2 (long)', got +INF,	expected same!

Tests when using both whole and fraction parts:

Simple operations checking signs
10.  0 (bin frac=0)
' num +  2', got 12.  0 (bin frac=0),	expected same!
' num + -2', got 8.  0 (bin frac=0),	expected same!
'-num +  2', got -8.  0 (bin frac=0),	expected same!
'-num + -2', got -12.  0 (bin frac=0),	expected same!
' num -  2', got 8.  0 (bin frac=0),	expected same!
' num - -2', got 12.  0 (bin frac=0),	expected same!
'-num -  2', got -12.  0 (bin frac=0),	expected same!
'-num - -2', got -8.  0 (bin frac=0),	expected same!
' num *  2', got 20.  0 (bin frac=0),	expected same!
' num * -2', got -20.  0 (bin frac=0),	expected same!
'-num *  2', got -20.  0 (bin frac=0),	expected same!
'-num * -2', got 20.  0 (bin frac=0),	expected same!
' num *  2 (long)', got 20.  0 (bin frac=0),	expected same!
' num * -2 (long)', got -20.  0 (bin frac=0),	expected same!
'-num *  2 (long)', got -20.  0 (bin frac=0),	expected same!
'-num * -2 (long)', got 20.  0 (bin frac=0),	expected same!
' num /  2', got 5.  0 (bin frac=0),	expected same!
' num / -2', got -5.  0 (bin frac=0),	expected same!
'-num /  2', got -5.  0 (bin frac=0),	expected same!
'-num / -2', got 5.  0 (bin frac=0),	expected same!

Total # of warnings: 0
All tests passed using 1-bit fracs, and '9' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 20
frac bits   : 12
whole max   : 524287
whole min   : -524287
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 4095
frac max    : 4095 (->decimals: .999)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  0 (bin frac=1),	expected same!
'-tiniest', got -0.  0 (bin frac=-1),	expected same!
'Largest', got 524287.998 (bin frac=4094),	expected same!
'Largest - tiniest', got 524287.998 (bin frac=4093),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -524287.-998 (bin frac=-4094),	expected same!
'Almost most negative', got -524287.-998 (bin frac=-4093),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 999 (bin 4095)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=4)
Showing fxp for 0.  2: 0.  1 (bin frac=8)
Showing fxp for 0.  3: 0.  2 (bin frac=12)
Showing fxp for 0.  4: 0.  3 (bin frac=16)
Showing fxp for 0.  5: 0.  4 (bin frac=20)

Showing fxp for 0.498: 0.497 (bin frac=2041)
Showing fxp for 0.499: 0.498 (bin frac=2045)
Showing fxp for 0.500: 0.499 (bin frac=2049)
Showing fxp for 0.501: 0.500 (bin frac=2053)
Showing fxp for 0.502: 0.501 (bin frac=2057)

Showing fxp for 0.994: 0.993 (bin frac=4074)
Showing fxp for 0.995: 0.994 (bin frac=4078)
Showing fxp for 0.996: 0.995 (bin frac=4082)
Showing fxp for 0.997: 0.996 (bin frac=4086)
Showing fxp for 0.998: 0.997 (bin frac=4090)
Showing fxp for 0.999: 0.999 (bin frac=4095)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.499 (bin frac=2049),	expected same!
'-0.(-)500', got -0.-499 (bin frac=-2049),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.222 (bin frac=910),	expected same!
'0.777777', got 0.777 (bin frac=3185),	expected same!
'0.991999', got 0.990 (bin frac=4062),	expected same!
'0.999999', got 0.999 (bin frac=4095),	expected same!

Tests that apply when using at least two bits for whole part (1-bit sign, 1-bit value):
'Way Too Large whole part!', got +INF,	expected same!
'Largest * 1', got 524287.998 (bin frac=4094),	expected same!
'Largest * -1', got -524287.-998 (bin frac=-4094),	expected same!
'one', got 1.  0 (bin frac=0),	expected same!
'Largest + one safe', got +INF,	expected same!
'Largest + one unsafe', got -524287.  0 (bin frac=-2),	expected same!
'Safe Too neg substraction', got -INF,	expected same!
'Unsafe Too neg substraction', got 524287.  0 (bin frac=2),	expected same!
'+inf - 1', got +INF,	expected same!
'-inf + 1', got -INF,	expected same!
'Half Max + Half Max', got 524287.998 (bin frac=4094),	expected same!
'FXP_MAX - Half Max', got 262143.999 (bin frac=4095),	expected same!
'Half Max + FXP_MAX', got +INF,	expected same!
'-FXP_MAX - Half Max', got -INF,	expected same!
'Half Max * 2', got 524287.998 (bin frac=4094),	expected same!
'Half Max * 2 (long)', got 524287.998 (bin frac=4094),	expected same!
'Half Max * 3', got +INF,	expected same!
'-Half Max * 3', got -INF,	expected same!
'Half Max / 0.25', got +INF,	expected same!
'-Half Max / 0.25', got -INF,	expected same!
'(HalfMax+1)*2', got +INF,	expected same!
'(HalfMax+1)*2 (long)', got +INF,	expected same!

Tests when using both whole and fraction parts:

Simple operations checking signs
10.249 (bin frac=1023)
' num +  2', got 12.249 (bin frac=1023),	expected same!
' num + -2', got 8.249 (bin frac=1023),	expected same!
'-num +  2', got -8.-249 (bin frac=-1023),	expected same!
'-num + -2', got -12.-249 (bin frac=-1023),	expected same!
' num -  2', got 8.249 (bin frac=1023),	expected same!
' num - -2', got 12.249 (bin frac=1023),	expected same!
'-num -  2', got -12.-249 (bin frac=-1023),	expected same!
'-num - -2', got -8.-249 (bin frac=-1023),	expected same!
' num *  2', got 20.499 (bin frac=2046),	expected same!
' num * -2', got -20.-499 (bin frac=-2046),	expected same!
'-num *  2', got -20.-499 (bin frac=-2046),	expected same!
'-num * -2', got 20.499 (bin frac=2046),	expected same!
' num *  2 (long)', got 20.499 (bin frac=2046),	expected same!
' num * -2 (long)', got -20.-499 (bin frac=-2046),	expected same!
'-num *  2 (long)', got -20.-499 (bin frac=-2046),	expected same!
'-num * -2 (long)', got 20.499 (bin frac=2046),	expected same!
' num /  2', got 5.124 (bin frac=511),	expected same!
' num / -2', got -5.-124 (bin frac=-511),	expected same!
'-num /  2', got -5.-124 (bin frac=-511),	expected same!
'-num / -2', got 5.124 (bin frac=511),	expected same!
m1 is 6144
'1.5 * 1.5', got 2.249 (bin frac=1024),	expected same!
'723.5 * 723.5', got 523452.249 (bin frac=1024),	expected same!
'-720.5 * -730.5', got +INF,	expected same!
'0.999 * 0.005', got 0.  5 (bin frac=23),	expected same!

Total # of warnings: 0
All tests passed using 12-bit fracs, and '999' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 16
frac bits   : 16
whole max   : 32767
whole min   : -32767
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 65535
frac max    : 65535 (->decimals: .9999)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  0 (bin frac=1),	expected same!
'-tiniest', got -0.  0 (bin frac=-1),	expected same!
'Largest', got 32767.9998 (bin frac=65534),	expected same!
'Largest - tiniest', got 32767.9998 (bin frac=65533),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -32767.-9998 (bin frac=-65534),	expected same!
'Almost most negative', got -32767.-9998 (bin frac=-65533),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999 (bin 65535)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=6)
Showing fxp for 0.  2: 0.  1 (bin frac=13)
Showing fxp for 0.  3: 0.  2 (bin frac=19)
Showing fxp for 0.  4: 0.  3 (bin frac=26)
Showing fxp for 0.  5: 0.  4 (bin frac=32)

Showing fxp for 0.4998: 0.4997 (bin frac=32757)
Showing fxp for 0.4999: 0.4998 (bin frac=32764)
Showing fxp for 0.5000: 0.4999 (bin frac=32770)
Showing fxp for 0.5001: 0.5000 (bin frac=32777)
Showing fxp for 0.5002: 0.5001 (bin frac=32783)

Showing fxp for 0.9994: 0.9993 (bin frac=65502)
Showing fxp for 0.9995: 0.9994 (bin frac=65508)
Showing fxp for 0.9996: 0.9995 (bin frac=65515)
Showing fxp for 0.9997: 0.9996 (bin frac=65521)
Showing fxp for 0.9998: 0.9997 (bin frac=65528)
Showing fxp for 0.9999: 0.9999 (bin frac=65535)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.499 (bin frac=32800),	expected same!
'-0.(-)500', got -0.-499 (bin frac=-32800),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.221 (bin frac=14563),	expected same!
'0.777777', got 0.776 (bin frac=50971),	expected same!
'0.991999', got 0.990 (bin frac=65010),	expected same!
'0.999999', got 0.999 (bin frac=65535),	expected same!

Tests that apply when using at least two bits for whole part (1-bit sign, 1-bit value):
'Way Too Large whole part!', got +INF,	expected same!
'Largest * 1', got 32767.9998 (bin frac=65534),	expected same!
'Largest * -1', got -32767.-9998 (bin frac=-65534),	expected same!
'one', got 1.  0 (bin frac=0),	expected same!
'Largest + one safe', got +INF,	expected same!
'Largest + one unsafe', got -32767.  0 (bin frac=-2),	expected same!
'Safe Too neg substraction', got -INF,	expected same!
'Unsafe Too neg substraction', got 32767.  0 (bin frac=2),	expected same!
'+inf - 1', got +INF,	expected same!
'-inf + 1', got -INF,	expected same!
'Half Max + Half Max', got 32767.9998 (bin frac=65534),	expected same!
'FXP_MAX - Half Max', got 16383.9999 (bin frac=65535),	expected same!
'Half Max + FXP_MAX', got +INF,	expected same!
'-FXP_MAX - Half Max', got -INF,	expected same!
'Half Max * 2', got 32767.9998 (bin frac=65534),	expected same!
'Half Max * 2 (long)', got 32767.9998 (bin frac=65534),	expected same!
'Half Max * 3', got +INF,	expected same!
'-Half Max * 3', got -INF,	expected same!
'Half Max / 0.25', got +INF,	expected same!
'-Half Max / 0.25', got -INF,	expected same!
'(HalfMax+1)*2', got +INF,	expected same!
'(HalfMax+1)*2 (long)', got +INF,	expected same!

Tests when using both whole and fraction parts:

Simple operations checking signs
10.2499 (bin frac=16383)
' num +  2', got 12.2499 (bin frac=16383),	expected same!
' num + -2', got 8.2499 (bin frac=16383),	expected same!
'-num +  2', got -8.-2499 (bin frac=-16383),	expected same!
'-num + -2', got -12.-2499 (bin frac=-16383),	expected same!
' num -  2', got 8.2499 (bin frac=16383),	expected same!
' num - -2', got 12.2499 (bin frac=16383),	expected same!
'-num -  2', got -12.-2499 (bin frac=-16383),	expected same!
'-num - -2', got -8.-2499 (bin frac=-16383),	expected same!
' num *  2', got 20.4999 (bin frac=32766),	expected same!
' num * -2', got -20.-4999 (bin frac=-32766),	expected same!
'-num *  2', got -20.-4999 (bin frac=-32766),	expected same!
'-num * -2', got 20.4999 (bin frac=32766),	expected same!
' num *  2 (long)', got 20.4999 (bin frac=32766),	expected same!
' num * -2 (long)', got -20.-4999 (bin frac=-32766),	expected same!
'-num *  2 (long)', got -20.-4999 (bin frac=-32766),	expected same!
'-num * -2 (long)', got 20.4999 (bin frac=32766),	expected same!
' num /  2', got 5.1249 (bin frac=8191),	expected same!
' num / -2', got -5.-1249 (bin frac=-8191),	expected same!
'-num /  2', got -5.-1249 (bin frac=-8191),	expected same!
'-num / -2', got 5.1249 (bin frac=8191),	expected same!

Total # of warnings: 0
All tests passed using 16-bit fracs, and '9999' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 8
frac bits   : 24
whole max   : 127
whole min   : -127
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 16777215
frac max    : 16777215 (->decimals: .9999999)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  0 (bin frac=1),	expected same!
'-tiniest', got -0.  0 (bin frac=-1),	expected same!
'Largest', got 127.9999998 (bin frac=16777214),	expected same!
'Largest - tiniest', got 127.9999997 (bin frac=16777213),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -127.-9999998 (bin frac=-16777214),	expected same!
'Almost most negative', got -127.-9999997 (bin frac=-16777213),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999999 (bin 16777215)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=1)
Showing fxp for 0.  2: 0.  1 (bin frac=3)
Showing fxp for 0.  3: 0.  2 (bin frac=5)
Showing fxp for 0.  4: 0.  3 (bin frac=6)
Showing fxp for 0.  5: 0.  4 (bin frac=8)

Showing fxp for 0.4999998: 0.4999997 (bin frac=8388604)
Showing fxp for 0.4999999: 0.4999998 (bin frac=8388606)
Showing fxp for 0.5000000: 0.4999999 (bin frac=8388608)
Showing fxp for 0.5000001: 0.5000000 (bin frac=8388610)
Showing fxp for 0.5000002: 0.5000001 (bin frac=8388611)

Showing fxp for 0.9999994: 0.9999993 (bin frac=16777206)
Showing fxp for 0.9999995: 0.9999994 (bin frac=16777208)
Showing fxp for 0.9999996: 0.9999995 (bin frac=16777209)
Showing fxp for 0.9999997: 0.9999996 (bin frac=16777211)
Showing fxp for 0.9999998: 0.9999997 (bin frac=16777213)
Showing fxp for 0.9999999: 0.9999999 (bin frac=16777215)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.499 (bin frac=8397004),	expected same!
'-0.(-)500', got -0.-499 (bin frac=-8397004),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.222 (bin frac=3728270),	expected same!
'0.777777', got 0.777 (bin frac=13048945),	expected same!
'0.991999', got 0.990 (bin frac=16642862),	expected same!
'0.999999', got 0.999 (bin frac=16777215),	expected same!

Tests that apply when using at least two bits for whole part (1-bit sign, 1-bit value):
'Way Too Large whole part!', got +INF,	expected same!
'Largest * 1', got 127.9999998 (bin frac=16777214),	expected same!
'Largest * -1', got -127.-9999998 (bin frac=-16777214),	expected same!
'one', got 1.  0 (bin frac=0),	expected same!
'Largest + one safe', got +INF,	expected same!
'Largest + one unsafe', got -127. -1 (bin frac=-2),	expected same!
'Safe Too neg substraction', got -INF,	expected same!
'Unsafe Too neg substraction', got 127.  1 (bin frac=2),	expected same!
'+inf - 1', got +INF,	expected same!
'-inf + 1', got -INF,	expected same!
'Half Max + Half Max', got 127.9999998 (bin frac=16777214),	expected same!
'FXP_MAX - Half Max', got 63.9999999 (bin frac=16777215),	expected same!
'Half Max + FXP_MAX', got +INF,	expected same!
'-FXP_MAX - Half Max', got -INF,	expected same!
'Half Max * 2', got 127.9999998 (bin frac=16777214),	expected same!
'Half Max * 2 (long)', got 127.9999998 (bin frac=16777214),	expected same!
'Half Max * 3', got +INF,	expected same!
'-Half Max * 3', got -INF,	expected same!
'Half Max / 0.25', got +INF,	expected same!
'-Half Max / 0.25', got -INF,	expected same!
'(HalfMax+1)*2', got +INF,	expected same!
'(HalfMax+1)*2 (long)', got +INF,	expected same!

Tests when using both whole and fraction parts:

Simple operations checking signs
10.2499999 (bin frac=4194303)
' num +  2', got 12.2499999 (bin frac=4194303),	expected same!
' num + -2', got 8.2499999 (bin frac=4194303),	expected same!
'-num +  2', got -8.-2499999 (bin frac=-4194303),	expected same!
'-num + -2', got -12.-2499999 (bin frac=-4194303),	expected same!
' num -  2', got 8.2499999 (bin frac=4194303),	expected same!
' num - -2', got 12.2499999 (bin frac=4194303),	expected same!
'-num -  2', got -12.-2499999 (bin frac=-4194303),	expected same!
'-num - -2', got -8.-2499999 (bin frac=-4194303),	expected same!
' num *  2', got 20.4999998 (bin frac=8388606),	expected same!
' num * -2', got -20.-4999998 (bin frac=-8388606),	expected same!
'-num *  2', got -20.-4999998 (bin frac=-8388606),	expected same!
'-num * -2', got 20.4999998 (bin frac=8388606),	expected same!
' num *  2 (long)', got 20.4999998 (bin frac=8388606),	expected same!
' num * -2 (long)', got -20.-4999998 (bin frac=-8388606),	expected same!
'-num *  2 (long)', got -20.-4999998 (bin frac=-8388606),	expected same!
'-num * -2 (long)', got 20.4999998 (bin frac=8388606),	expected same!
' num /  2', got 5.1249999 (bin frac=2097151),	expected same!
' num / -2', got -5.-1249999 (bin frac=-2097151),	expected same!
'-num /  2', got -5.-1249999 (bin frac=-2097151),	expected same!
'-num / -2', got 5.1249999 (bin frac=2097151),	expected same!

Total # of warnings: 0
All tests passed using 24-bit fracs, and '9999999' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 1
frac bits   : 31
whole max   : 0
whole min   : 0
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 2147483647
frac max    : 2147483646 (->decimals: .9999999)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  0 (bin frac=1),	expected same!
'-tiniest', got -0.  0 (bin frac=-1),	expected same!
'Largest', got 0.9999999 (bin frac=2147483646),	expected same!
'Largest - tiniest', got 0.9999998 (bin frac=2147483645),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -0.-9999999 (bin frac=-2147483646),	expected same!
'Almost most negative', got -0.-9999998 (bin frac=-2147483645),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999999 (bin 2147483646)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=214)
Showing fxp for 0.  2: 0.  1 (bin frac=429)
Showing fxp for 0.  3: 0.  2 (bin frac=644)
Showing fxp for 0.  4: 0.  3 (bin frac=858)
Showing fxp for 0.  5: 0.  4 (bin frac=1073)

Showing fxp for 0.4999998: 0.4999997 (bin frac=1073741500)
Showing fxp for 0.4999999: 0.4999998 (bin frac=1073741715)
Showing fxp for 0.5000000: 0.4999999 (bin frac=1073741930)
Showing fxp for 0.5000001: 0.5000000 (bin frac=1073742145)
Showing fxp for 0.5000002: 0.5000001 (bin frac=1073742359)

Showing fxp for 0.9999994: 0.9999993 (bin frac=2147482572)
Showing fxp for 0.9999995: 0.9999994 (bin frac=2147482787)
Showing fxp for 0.9999996: 0.9999995 (bin frac=2147483001)
Showing fxp for 0.9999997: 0.9999996 (bin frac=2147483216)
Showing fxp for 0.9999998: 0.9999997 (bin frac=2147483431)
Showing fxp for 0.9999999: 0.9999999 (bin frac=2147483646)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.499 (bin frac=1074816639),	expected same!
'-0.(-)500', got -0.-499 (bin frac=-1074816639),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.222 (bin frac=477218588),	expected same!
'0.777777', got 0.777 (bin frac=1670265058),	expected same!
'0.991999', got 0.990 (bin frac=2130286579),	expected same!
'0.999999', got 0.999 (bin frac=2147483646),	expected same!

Total # of warnings: 0
All tests passed using 31-bit fracs, and '9999999' as max decimal frac.


========================
FXP configuration parameters:
pos infinity: 2147483647
whole bits  : 1
frac bits   : 31
whole max   : 0
whole min   : 0
neg infinity: -2147483647
undefined   : -2147483648
frac mask   : 2147483647
frac max    : 2147483646 (->decimals: .9999999)

Some general tests:
'Infinity', got +INF,	expected same!
'-Infinity', got -INF,	expected same!
'Undefined', got UNDEF,	expected same!
'zero', got 0.  0 (bin frac=0),	expected same!
'tiniest', got 0.  0 (bin frac=1),	expected same!
'-tiniest', got -0.  0 (bin frac=-1),	expected same!
'Largest', got 0.9999999 (bin frac=2147483646),	expected same!
'Largest - tiniest', got 0.9999998 (bin frac=2147483645),	expected same!
'Largest + tiniest safe', got +INF,	expected same!
'Largest + tiniest unsafe', got +INF,	expected same!
'Most negative', got -0.-9999999 (bin frac=-2147483646),	expected same!
'Almost most negative', got -0.-9999998 (bin frac=-2147483645),	expected same!
'+inf + +inf', got +INF,	expected same!
'-inf - +inf', got -INF,	expected same!
'+inf + -inf', got UNDEF,	expected same!
'-inf + -inf', got -INF,	expected same!
'-inf - -inf', got UNDEF,	expected same!
'+inf * -inf', got -INF,	expected same!
'+num / zero', got +INF,	expected same!
'zero / zero', got UNDEF,	expected same!
'zero * zero', got 0.  0 (bin frac=0),	expected same!
'zero + zero', got 0.  0 (bin frac=0),	expected same!
'zero - zero', got 0.  0 (bin frac=0),	expected same!
'-num / zero', got -INF,	expected same!
'zero * +inf', got UNDEF,	expected same!
'zero * -inf', got UNDEF,	expected same!
'zero * undef', got UNDEF,	expected same!
'-inf * undef', got UNDEF,	expected same!
'+inf * undef', got UNDEF,	expected same!
'undef * undef', got UNDEF,	expected same!
'tiniest * inf', got +INF,	expected same!

Tests that apply when using at least one frac bit

Checking decimal <=> bin mappings of frac ranges:
Max frac dec: 9999999 (bin 2147483646)
Showing fxp for 0.  0: 0.  0 (bin frac=0)
Showing fxp for 0.  1: 0.  0 (bin frac=214)
Showing fxp for 0.  2: 0.  1 (bin frac=429)
Showing fxp for 0.  3: 0.  2 (bin frac=644)
Showing fxp for 0.  4: 0.  3 (bin frac=858)
Showing fxp for 0.  5: 0.  4 (bin frac=1073)

Showing fxp for 0.4999998: 0.4999997 (bin frac=1073741500)
Showing fxp for 0.4999999: 0.4999998 (bin frac=1073741715)
Showing fxp for 0.5000000: 0.4999999 (bin frac=1073741930)
Showing fxp for 0.5000001: 0.5000000 (bin frac=1073742145)
Showing fxp for 0.5000002: 0.5000001 (bin frac=1073742359)

Showing fxp for 0.9999994: 0.9999993 (bin frac=2147482572)
Showing fxp for 0.9999995: 0.9999994 (bin frac=2147482787)
Showing fxp for 0.9999996: 0.9999995 (bin frac=2147483001)
Showing fxp for 0.9999997: 0.9999996 (bin frac=2147483216)
Showing fxp for 0.9999998: 0.9999997 (bin frac=2147483431)
Showing fxp for 0.9999999: 0.9999999 (bin frac=2147483646)

Checking sign taken from frac when whole==0
'-0.(+)500', got 0.499 (bin frac=1074816639),	expected same!
'-0.(-)500', got -0.-499 (bin frac=-1074816639),	expected same!

Truncation of longer frac decimal arguments
'0.222222', got 0.222 (bin frac=477218588),	expected same!
'0.777777', got 0.777 (bin frac=1670265058),	expected same!
'0.991999', got 0.990 (bin frac=2130286579),	expected same!
'0.999999', got 0.999 (bin frac=2147483646),	expected same!

Total # of warnings: 0
All tests passed using 31-bit fracs, and '9999999' as max decimal frac.

