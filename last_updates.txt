
Last updates:

2022-11-15: first version

2023-01-04: bug fix in fxp_sum

2023-01-05: Multiplication now done not using longs, entirely with ints, so 
supporting systems where sizeof(long) == sizeof(int), but for now at the 
cost of performance, and some precision loss (but that precision loss gets 
solved later, see update end of Jan/2023 below).

2023-01-06: bugs fixed in new safe multiplication, also in the safe sum for 
a border case.

2023-01-08: new version with runtime-modifiable number of bits to use for 
the frac part. Fine-tuned all code, now all tests run with 0 warnings for 
any chosen number of frac bits. Tester checks different nums of frac bits.

2023-01-09: Default number of frac bits is set to 14. Beautified tester 
output organization.

2023-01-11: Using gcc's own built in to count leading zeros. Tester program 
now using long-doubles to better compare different implementations of the 
operations. Thanks to that, a few bugs exposed and fixed along the way.

2023-01-15: implemented fxp division using only ints (fxp_div) Basically a 
software-based implementation of binary division (tailored to fxp's.) 
Because of this, it is significantly slower: average execution time of 
first version is ~6x that of fxp_div_l. However it will work for systems in 
which sizeof(long) is not larger than sizeof(int).

2023-01-29: improved testing framework using long doubles, and refactored 
some utility functions related to testing and tracing in a separate file: 
fxp_aux.c.

2023-01-31: significant precision improvement in fxp_mul(), now offering 
pretty much the same precision as fxp_mul_l() while still only using ints, 
no longs. The calculation uses the distributive approach twice, now the 
second time within the frac part only.

2023-02-01: bug fixed in fxp_xtimes.c. After this fix, the true relative 
execution time of fxp_mul() is shown to be effectively ~6x that of 
fxp_mul_l(). This makes a lot of sense, as a similar ratio stands between 
fxp_div() and fxp_div_l(). Both * and / operations implemented using longs 
are then significantly faster (~6x) than the int-only implementations.

2023-02-09: log2_l implemented. Uses an algorithm that requires one 
multiplication (using longs) per mantissa bit, so simple to implement, but 
quite expensive. Likely will replace it with a more efficient one later. 
For now the relative execution time of one log2_l() calculation of an fxp 
is about ~18x that of adding two fxp's.

2023-02-10: BKM for logarithm calculation implemented: log2_bkm() Clearly 
faster than log2_l: ~28.5% the runtime: one BKM log calculation is about 
~5x the addition of two fxp's. The BKM calculation also has 30 bit-frac 
precision (log2_l's precision is max 29 frac bits). BKM can also compute 
the logarithms when the fxp config is using only 1 whole bit (log2_l 
requires at least 3 whole bits.) Tester requires relaxing the delta 
tolerance in this case. The only drawback of BKM is that it requires some 
more memory: needs a table of 32 ints with some pre-calculated log values

2023-02-11: Debugging implementations of log2, and exploring the largest 
errors incurred. Also moving these last updates out of the README and into
this separate file.

2023-02-14: lg2 implemented and debugged. 4 versions:
lg2():      BKM using only ints. Excellent accuracy, fast.
lg2_l():    BKM using longs. Excellent accuracy, fastest.
lg2_mul():  Uses multiplication, and only ints. This is the slowest, but
            requires no table of pre-calculated values like BKM does.
            Not as accurate as the BKM-based functions.
lg2_mul_l(): Uses multiplication and longs, no table of pre-calculated
            values required. Not as accurate as the BKM-based functions.
