[H[2J[3J
=================================================
Relative Execution Times of FXP operations
=================================================
Operating System: Ubuntu 22.04.2 LTS
    Architecture: x86-64
model name	: Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz

System details:

Num type sizes:
char        has a size of 1 bytes.
int         has a size of 4 bytes.
long        has a size of 8 bytes.
long long   has a size of 8 bytes.
float       has a size of 4 bytes.
double      has a size of 8 bytes.
long double has a size of 16 bytes.

Number of frac bits: 8
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  11.75
mul_l    :   1.62
div      :  17.11
div_l    :   2.97
lg2      :  52.63  (BKM-L, only ints)
lg2_l    :   7.20  (about  0.14x lg2, using BKM-L and longs)
lg2_mul_l:  21.04  (about  0.40x lg2, using mult. and longs)
ln       : 217.64  (using lg2)
ln_l     :  26.72  (about  0.51x lg2, using lg2_l)
lg10     : 217.37  (using lg2)
lg10_l   :  26.70  (about  0.51x lg2, using lg2_l)
pow2     : 128.55  (BKM-E, only ints)
pow2_l   :  16.05  (about  0.12x pow2, using BKM-E and longs)
exp      : 136.30  (about  1.06x pow2, using pow2)
exp_l    :  20.09  (about  0.16x pow2, using pow2_l)
pow10    : 122.08  (about  0.95x pow2, using pow2)
pow10_l  :  18.53  (about  0.14x pow2, using pow2_l)
sqrt     : 335.97  (about  2.61x pow2, using lg2 & pow2)
sqrt_l   :  39.66  (about  0.31x pow2, using lg2_l & pow2_l)
powxy    : 381.32  (about  2.97x pow2, using lg2 & pow2)
powxy_l  :  48.66  (about  0.38x pow2, using lg2_l & pow2_l)

Number of frac bits: 12
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  12.22
mul_l    :   1.65
div      :  18.25
div_l    :   2.96
lg2      :  74.73  (BKM-L, only ints)
lg2_l    :   9.70  (about  0.13x lg2, using BKM-L and longs)
lg2_mul_l:  31.35  (about  0.42x lg2, using mult. and longs)
ln       : 222.84  (using lg2)
ln_l     :  27.29  (about  0.37x lg2, using lg2_l)
lg10     : 222.70  (using lg2)
lg10_l   :  27.28  (about  0.37x lg2, using lg2_l)
pow2     : 121.86  (BKM-E, only ints)
pow2_l   :  15.29  (about  0.13x pow2, using BKM-E and longs)
exp      : 133.04  (about  1.09x pow2, using pow2)
exp_l    :  19.78  (about  0.16x pow2, using pow2_l)
pow10    : 121.79  (about  1.00x pow2, using pow2)
pow10_l  :  18.50  (about  0.15x pow2, using pow2_l)
sqrt     : 343.23  (about  2.82x pow2, using lg2 & pow2)
sqrt_l   :  40.42  (about  0.33x pow2, using lg2_l & pow2_l)
powxy    : 385.80  (about  3.17x pow2, using lg2 & pow2)
powxy_l  :  48.96  (about  0.40x pow2, using lg2_l & pow2_l)

Number of frac bits: 16
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  12.85
mul_l    :   1.59
div      :  19.54
div_l    :   2.95
lg2      :  96.82  (BKM-L, only ints)
lg2_l    :  12.15  (about  0.13x lg2, using BKM-L and longs)
lg2_mul_l:  41.81  (about  0.43x lg2, using mult. and longs)
ln       : 223.47  (using lg2)
ln_l     :  27.32  (about  0.28x lg2, using lg2_l)
lg10     : 223.05  (using lg2)
lg10_l   :  27.38  (about  0.28x lg2, using lg2_l)
pow2     : 118.97  (BKM-E, only ints)
pow2_l   :  14.97  (about  0.13x pow2, using BKM-E and longs)
exp      : 129.28  (about  1.09x pow2, using pow2)
exp_l    :  19.35  (about  0.16x pow2, using pow2_l)
pow10    : 121.21  (about  1.02x pow2, using pow2)
pow10_l  :  18.42  (about  0.15x pow2, using pow2_l)
sqrt     : 343.51  (about  2.89x pow2, using lg2 & pow2)
sqrt_l   :  40.45  (about  0.34x pow2, using lg2_l & pow2_l)
powxy    : 385.61  (about  3.24x pow2, using lg2 & pow2)
powxy_l  :  49.12  (about  0.41x pow2, using lg2_l & pow2_l)

Number of frac bits: 20
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  13.44
mul_l    :   1.59
div      :  16.92
div_l    :   2.90
lg2      : 117.88  (BKM-L, only ints)
lg2_l    :  14.35  (about  0.12x lg2, using BKM-L and longs)
lg2_mul_l:  51.45  (about  0.44x lg2, using mult. and longs)
ln       : 220.60  (using lg2)
ln_l     :  26.98  (about  0.23x lg2, using lg2_l)
lg10     : 220.20  (using lg2)
lg10_l   :  27.01  (about  0.23x lg2, using lg2_l)
pow2     : 110.25  (BKM-E, only ints)
pow2_l   :  14.02  (about  0.13x pow2, using BKM-E and longs)
exp      : 122.50  (about  1.11x pow2, using pow2)
exp_l    :  18.51  (about  0.17x pow2, using pow2_l)
pow10    : 115.93  (about  1.05x pow2, using pow2)
pow10_l  :  17.71  (about  0.16x pow2, using pow2_l)
sqrt     : 339.41  (about  3.08x pow2, using lg2 & pow2)
sqrt_l   :  39.89  (about  0.36x pow2, using lg2_l & pow2_l)
powxy    : 380.72  (about  3.45x pow2, using lg2 & pow2)
powxy_l  :  48.44  (about  0.44x pow2, using lg2_l & pow2_l)

Number of frac bits: 24
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  13.69
mul_l    :   1.61
div      :  16.52
div_l    :   2.91
lg2      : 143.14  (BKM-L, only ints)
lg2_l    :  16.94  (about  0.12x lg2, using BKM-L and longs)
lg2_mul_l:  62.58  (about  0.44x lg2, using mult. and longs)
ln       : 222.27  (using lg2)
ln_l     :  27.22  (about  0.19x lg2, using lg2_l)
lg10     : 222.17  (using lg2)
lg10_l   :  27.26  (about  0.19x lg2, using lg2_l)
pow2     : 105.82  (BKM-E, only ints)
pow2_l   :  13.58  (about  0.13x pow2, using BKM-E and longs)
exp      : 119.93  (about  1.13x pow2, using pow2)
exp_l    :  18.32  (about  0.17x pow2, using pow2_l)
pow10    : 114.84  (about  1.09x pow2, using pow2)
pow10_l  :  17.70  (about  0.17x pow2, using pow2_l)
sqrt     : 342.33  (about  3.23x pow2, using lg2 & pow2)
sqrt_l   :  40.33  (about  0.38x pow2, using lg2_l & pow2_l)
powxy    : 384.50  (about  3.63x pow2, using lg2 & pow2)
powxy_l  :  48.95  (about  0.46x pow2, using lg2_l & pow2_l)

Number of frac bits: 28
10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  
add      :   1.00
mul      :  13.91
mul_l    :   1.62
div      :  15.78
div_l    :   2.90
lg2      : 169.68  (BKM-L, only ints)
lg2_l    :  19.52  (about  0.12x lg2, using BKM-L and longs)
lg2_mul_l:  73.51  (about  0.43x lg2, using mult. and longs)
ln       : 223.59  (using lg2)
ln_l     :  27.44  (about  0.16x lg2, using lg2_l)
lg10     : 223.50  (using lg2)
lg10_l   :  27.45  (about  0.16x lg2, using lg2_l)
pow2     : 114.58  (BKM-E, only ints)
pow2_l   :  14.53  (about  0.13x pow2, using BKM-E and longs)
exp      : 125.98  (about  1.10x pow2, using pow2)
exp_l    :  18.93  (about  0.17x pow2, using pow2_l)
pow10    : 114.52  (about  1.00x pow2, using pow2)
pow10_l  :  17.65  (about  0.15x pow2, using pow2_l)
sqrt     : 343.99  (about  3.00x pow2, using lg2 & pow2)
sqrt_l   :  40.63  (about  0.35x pow2, using lg2_l & pow2_l)
powxy    : 385.40  (about  3.36x pow2, using lg2 & pow2)
powxy_l  :  49.13  (about  0.43x pow2, using lg2_l & pow2_l)


=================================================
Relative Xtime averages for frac bit configurations {8, 12, 16, 20, 24, 28}
=================================================
add      :   1.00  (  4.92x system's native addition of ints)
mul      :  12.98  ( 63.06x system's native multiplication of ints)
mul_l    :   1.61  (  7.83x system's native multiplication of ints)
div      :  17.35  ( 34.30x system's native division of ints)
div_l    :   2.93  (  5.80x system's native division of ints)
lg2      : 109.22  (BKM, only ints)
lg2_l    :  13.32  (about  0.12x lg2, using BKM and longs)
lg2_mul_l:  46.99  (about  0.43x lg2, using mult. and longs)
ln       : 221.73  (about  2.03x lg2, using lg2)
ln_l     :  27.16  (about  0.25x lg2, using lg2_l)
lg10     : 221.50  (about  2.03x lg2, using lg2)
lg10_l   :  27.18  (about  0.25x lg2, using lg2_l)
pow2     : 116.64  (BKM, only ints)
pow2_l   :  14.74  (about  0.13x pow2, using BKM and longs)
exp      : 127.82  (about  1.10x pow2, using pow2)
exp_l    :  19.16  (about  0.16x pow2, using pow2_l)
pow10    : 118.39  (about  1.01x pow2, using pow2)
pow10_l  :  18.08  (about  0.16x pow2, using pow2_l)
sqrt     : 341.41  (about  2.93x pow2, using lg2 & pow2)
sqrt_l   :  40.23  (about  0.34x pow2, using lg2_l & pow2_l)
powxy    : 383.88  (about  3.29x pow2, using lg2 & pow2)
powxy_l  :  48.87  (about  0.42x pow2, using lg2_l & pow2_l)
=================================================
(Keep in mind: compiler optimization options used/not used can affect these measurements significantly.)

